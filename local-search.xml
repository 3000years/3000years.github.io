<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>23种设计模式</title>
    <link href="/2022/05/07/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/07/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>一、什么是设计模式</strong>                                                                    </p><p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题，每种模式在现在中都有相应的原理来与之对应，每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是它能被广泛应用的原因。简单说：</p><p><strong>模式：在某些场景下，针对某类问题的某种通用的解决方案。</strong></p><p>场景：项目所在的环境</p><p>问题：约束条件，项目目标等</p><p>解决方案：通用、可复用的设计，解决约束达到目标。</p><p><strong>二、设计模式的三个分类</strong>                                                                 </p><p><strong>创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程。</strong></p><p><strong>结构型模式：把类或对象结合在一起形成一个更大的结构。</strong></p><p><strong>行为型模式：类和对象如何交互，及划分责任和算法。</strong></p><p><strong>如下图所示：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed//img/20220508200705.png"></p><p><strong>三、各分类中模式的关键点</strong>                                                               </p><p>单例模式：某个类只能有一个实例，提供一个全局的访问点。</p><p>简单工厂：一个工厂类根据传入的参量决定创建出那一种产品类的实例。</p><p>工厂方法：定义一个创建对象的接口，让子类决定实例化那个类。</p><p>抽象工厂：创建相关或依赖对象的家族，而无需明确指定具体类。</p><p>建造者模式：封装一个复杂对象的构建过程，并可以按步骤构造。</p><p>原型模式：通过复制现有的实例来创建新的实例。</p><p>适配器模式：将一个类的方法接口转换成客户希望的另外一个接口。</p><p>组合模式：将对象组合成树形结构以表示“”部分-整体“”的层次结构。</p><p>装饰模式：动态的给对象添加新的功能。</p><p>代理模式：为其他对象提供一个代理以便控制这个对象的访问。</p><p>亨元（蝇量）模式：通过共享技术来有效的支持大量细粒度的对象。</p><p>外观模式：对外提供一个统一的方法，来访问子系统中的一群接口。</p><p>桥接模式：将抽象部分和它的实现部分分离，使它们都可以独立的变化。</p><p>模板模式：定义一个算法结构，而将一些步骤延迟到子类实现。</p><p>解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器。</p><p>策略模式：定义一系列算法，把他们封装起来，并且使它们可以相互替换。</p><p>状态模式：允许一个对象在其对象内部状态改变时改变它的行为。</p><p>观察者模式：对象间的一对多的依赖关系。</p><p>备忘录模式：在不破坏封装的前提下，保持对象的内部状态。</p><p>中介者模式：用一个中介对象来封装一系列的对象交互。</p><p>命令模式：将命令请求封装为一个对象，使得可以用不同的请求来进行参数化。</p><p>访问者模式：在不改变数据结构的前提下，增加作用于一组对象元素的新功能。</p><p>责任链模式：将请求的发送者和接收者解耦，使的多个对象都有处理这个请求的机会。</p><p>迭代器模式：一种遍历访问聚合对象中各个元素的方法，不暴露该对象的内部结构。</p><p><strong>四、概说23种设计模式</strong>                                                                   </p><p>1.单例模式                                                                       </p><p>单例模式，它的定义就是确保某一个类只有一个实例，并且提供一个全局访问点。</p><p>单例模式具备典型的3个特点：1、只有一个实例。 2、自我实例化。 3、提供全局访问点。</p><p> 因此当系统中只需要一个实例对象或者系统中只允许一个公共访问点，除了这个公共访问点外，不能通过其他访问点访问该实例时，可以使用单例模式。</p><p>单例模式的主要优点就是节约系统资源、提高了系统效率，同时也能够严格控制客户对它的访问。也许就是因为系统中只有一个实例，这样就导致了单例类的职责过重，违背了“单一职责原则”，同时也没有抽象类，所以扩展起来有一定的困难。其UML结构图非常简单，就只有一个类，如下图：</p><p>1.单例模式                                                                       </p><p>单例模式，它的定义就是确保某一个类只有一个实例，并且提供一个全局访问点。</p><p>单例模式具备典型的3个特点：1、只有一个实例。 2、自我实例化。 3、提供全局访问点。</p><p> 因此当系统中只需要一个实例对象或者系统中只允许一个公共访问点，除了这个公共访问点外，不能通过其他访问点访问该实例时，可以使用单例模式。</p><p>单例模式的主要优点就是节约系统资源、提高了系统效率，同时也能够严格控制客户对它的访问。也许就是因为系统中只有一个实例，这样就导致了单例类的职责过重，违背了“单一职责原则”，同时也没有抽象类，所以扩展起来有一定的困难。其UML结构图非常简单，就只有一个类，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201044.png"></p><p>2.工厂方法模式                                                                   </p><p>作为抽象工厂模式的孪生兄弟，工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个，也就是说工厂方法模式让实例化推迟到子类。</p><p>工厂方法模式非常符合“开闭原则”，当需要增加一个新的产品时，我们只需要增加一个具体的产品类和与之对应的具体工厂即可，无须修改原有系统。同时在工厂方法模式中用户只需要知道生产产品的具体工厂即可，无须关系产品的创建过程，甚至连具体的产品类名称都不需要知道。虽然他很好的符合了“开闭原则”，但是由于每新增一个新产品时就需要增加两个类，这样势必会导致系统的复杂度增加。其UML结构图：</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed//img/20220508200856.png"></p><p>3.抽象工厂模式                                                                   </p><p>所谓抽象工厂模式就是提供一个接口，用于创建相关或者依赖对象的家族，而不需要明确指定具体类。他允许客户端使用抽象的接口来创建一组相关的产品，而不需要关系实际产出的具体产品是什么。这样一来，客户就可以从具体的产品中被解耦。它的优点是隔离了具体类的生成，使得客户端不需要知道什么被创建了，而缺点就在于新增新的行为会比较麻烦，因为当添加一个新的产品对象时，需要更加需要更改接口及其下所有子类。其UML结构图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201115.png"></p><p>4.建造者模式                                                                      </p><p>对于建造者模式而已，它主要是将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示。适用于那些产品对象的内部结构比较复杂。</p><p>建造者模式将复杂产品的构建过程封装分解在不同的方法中，使得创建过程非常清晰，能够让我们更加精确的控制复杂产品对象的创建过程，同时它隔离了复杂产品对象的创建和使用，使得相同的创建过程能够创建不同的产品。但是如果某个产品的内部结构过于复杂，将会导致整个系统变得非常庞大，不利于控制，同时若几个产品之间存在较大的差异，则不适用建造者模式，毕竟这个世界上存在相同点大的两个产品并不是很多，所以它的使用范围有限。其UML结构图：</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201145.png"></p><p>5.原型模式      </p><p>在我们应用程序可能有某些对象的结构比较复杂，但是我们又需要频繁的使用它们，如果这个时候我们来不断的新建这个对象势必会大大损耗系统内存的，这个时候我们需要使用原型模式来对这个结构复杂又要频繁使用的对象进行克隆。所以原型模式就是用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。</p><p>它主要应用与那些创建新对象的成本过大时。它的主要优点就是简化了新对象的创建过程，提高了效率，同时原型模式提供了简化的创建结构。UML结构图：</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201215.png"></p><p><strong>模式结构</strong><br>原型模式包含如下角色：<br>Prototype：抽象原型类<br>ConcretePrototype：具体原型类<br>Client：客户类</p><p>6.适配器模式                                                                       </p><p>在我们的应用程序中我们可能需要将两个不同接口的类来进行通信，在不修改这两个的前提下我们可能会需要某个中间件来完成这个衔接的过程。这个中间件就是适配器。所谓适配器模式就是将一个类的接口，转换成客户期望的另一个接口。它可以让原本两个不兼容的接口能够无缝完成对接。</p><p>作为中间件的适配器将目标类和适配者解耦，增加了类的透明性和可复用性。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201256.png"></p><p>适配器模式包含如下角色：<br>Target：目标抽象类<br>Adapter：适配器类<br>Adaptee：适配者类<br>Client：客户类</p><p>7.桥接模式                                                                        </p><p>如果说某个系统能够从多个角度来进行分类，且每一种分类都可能会变化，那么我们需要做的就是讲这多个角度分离出来，使得他们能独立变化，减少他们之间的耦合，这个分离过程就使用了桥接模式。所谓桥接模式就是讲抽象部分和实现部分隔离开来，使得他们能够独立变化。</p><p>桥接模式将继承关系转化成关联关系，封装了变化，完成了解耦，减少了系统中类的数量，也减少了代码量。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201322.png"></p><p>桥接模式包含如下角色：<br>Abstraction：抽象类<br>RefinedAbstraction：扩充抽象类<br>Implementor：实现类接口<br>ConcreteImplementor：具体实现类</p><p>8.组合模式                                                                        </p><p>组合模式组合多个对象形成树形结构以表示“整体-部分”的结构层次。它定义了如何将容器对象和叶子对象进行递归组合，使得客户在使用的过程中无须进行区分，可以对他们进行一致的处理。在使用组合模式中需要注意一点也是组合模式最关键的地方：叶子对象和组合对象实现相同的接口。这就是组合模式能够将叶子节点和对象节点进行一致处理的原因。</p><p>虽然组合模式能够清晰地定义分层次的复杂对象，也使得增加新构件也更容易，但是这样就导致了系统的设计变得更加抽象，如果系统的业务规则比较复杂的话，使用组合模式就有一定的挑战了。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201355.png"></p><p> <strong>模式结构</strong><br>组合模式包含如下角色：<br>Component: 抽象构件<br>Leaf: 叶子构件<br>Composite: 容器构件<br>Client: 客户类</p><p>9.装饰模式                                                                          </p><p>我们可以通过继承和组合的方式来给一个对象添加行为，虽然使用继承能够很好拥有父类的行为，但是它存在几个缺陷：一、对象之间的关系复杂的话，系统变得复杂不利于维护。二、容易产生“类爆炸”现象。三、是静态的。在这里我们可以通过使用装饰者模式来解决这个问题。</p><p>装饰者模式，动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更加有弹性的替代方案。虽然装饰者模式能够动态将责任附加到对象上，但是他会产生许多的细小对象，增加了系统的复杂度。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201428.png"></p><p><strong>模式结构</strong><br>装饰模式包含如下角色：<br>Component: 抽象构件<br>ConcreteComponent: 具体构件<br>Decorator: 抽象装饰类<br>ConcreteDecorator: 具体装饰类</p><p>10.外观模式                                                                         </p><p>我们都知道类与类之间的耦合越低，那么可复用性就越好，如果两个类不必彼此通信，那么就不要让这两个类发生直接的相互关系，如果需要调用里面的方法，可以通过第三者来转发调用。外观模式非常好的诠释了这段话。外观模式提供了一个统一的接口，用来访问子系统中的一群接口。它让一个应用程序中子系统间的相互依赖关系减少到了最少，它给子系统提供了一个简单、单一的屏障，客户通过这个屏障来与子系统进行通信。通过使用外观模式，使得客户对子系统的引用变得简单了，实现了客户与子系统之间的松耦合。但是它违背了“开闭原则”，因为增加新的子系统可能需要修改外观类或客户端的源代码。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201503.png"></p><p>外观模式包含如下角色：<br>Facade: 外观角色<br>SubSystem:子系统角色</p><p>11.亨元模式                                                                         </p><p>在一个系统中对象会使得内存占用过多，特别是那些大量重复的对象，这就是对系统资源的极大浪费。享元模式对对象的重用提供了一种解决方案，它使用共享技术对相同或者相似对象实现重用。享元模式就是运行共享技术有效地支持大量细粒度对象的复用。系统使用少量对象,而且这些都比较相似，状态变化小，可以实现对象的多次复用。这里有一点要注意：享元模式要求能够共享的对象必须是细粒度对象。享元模式通过共享技术使得系统中的对象个数大大减少了，同时享元模式使用了内部状态和外部状态，同时外部状态相对独立，不会影响到内部状态，所以享元模式能够使得享元对象在不同的环境下被共享。同时正是分为了内部状态和外部状态，享元模式会使得系统变得更加复杂，同时也会导致读取外部状态所消耗的时间过长。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201532.png"></p><p>享元模式包含如下角色：<br>Flyweight: 抽象享元类<br>ConcreteFlyweight: 具体享元类<br>UnsharedConcreteFlyweight: 非共享具体享元类<br>FlyweightFactory: 享元工厂类</p><p>12.代理模式                                                                        </p><p> 代理模式就是给一个对象提供一个代理，并由代理对象控制对原对象的引用。它使得客户不能直接与真正的目标对象通信。代理对象是目标对象的代表，其他需要与这个目标对象打交道的操作都是和这个代理对象在交涉。</p><p>代理对象可以在客户端和目标对象之间起到中介的作用，这样起到了的作用和保护了目标对象的，同时也在一定程度上面减少了系统的耦合度。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201552.png"></p><p>代理模式包含如下角色：<br> Subject: 抽象主题角色<br> Proxy: 代理主题角色<br> RealSubject: 真实主题角色</p><p>13.访问者模式                                                                      </p><p>访问者模式俗称23大设计模式中最难的一个。除了结构复杂外，理解也比较难。在我们软件开发中我们可能会对同一个对象有不同的处理，如果我们都做分别的处理，将会产生灾难性的错误。对于这种问题，访问者模式提供了比较好的解决方案。访问者模式即表示一个作用于某对象结构中的各元素的操作，它使我们可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p><p>访问者模式的目的是封装一些施加于某种数据结构元素之上的操作，一旦这些操作需要修改的话，接受这个操作的数据结构可以保持不变。为不同类型的元素提供多种访问操作方式，且可以在不修改原有系统的情况下增加新的操作方式。同时我们还需要明确一点那就是访问者模式是适用于那些数据结构比较稳定的，因为他是将数据的操作与数据结构进行分离了，如果某个系统的数据结构相对稳定，但是操作算法易于变化的话，就比较适用适用访问者模式，因为访问者模式使得算法操作的增加变得比较简单了。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201638.png"></p><p>访问者模式包含如下角色：<br>Vistor: 抽象访问者<br>ConcreteVisitor: 具体访问者<br>Element: 抽象元素<br>ConcreteElement: 具体元素<br>ObjectStructure: 对象结构</p><p>14.模板模式                                                                        </p><p>有些时候我们做某几件事情的步骤都差不多，仅有那么一小点的不同，在软件开发的世界里同样如此，如果我们都将这些步骤都一一做的话，费时费力不讨好。所以我们可以将这些步骤分解、封装起来，然后利用继承的方式来继承即可，当然不同的可以自己重写实现嘛！这就是模板方法模式提供的解决方案。</p><p>所谓模板方法模式就是在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</p><p>模板方法模式就是基于继承的代码复用技术的。在模板方法模式中，我们可以将相同部分的代码放在父类中，而将不同的代码放入不同的子类中。也就是说我们需要声明一个抽象的父类，将部分逻辑以具体方法以及具体构造函数的形式实现，然后声明一些抽象方法让子类来实现剩余的逻辑，不同的子类可以以不同的方式来实现这些逻辑。所以模板方法的模板其实就是一个普通的方法，只不过这个方法是将算法实现的步骤封装起来的。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201656.png"></p><p>模板方法模式包含如下角色：<br>AbstractClass: 抽象类<br>ConcreteClass: 具体子类</p><p>15.策略模式                                                                       </p><p> 我们知道一件事可能会有很多种方式来实现它，但是其中总有一种最高效的方式，在软件开发的世界里面同样如此，我们也有很多中方法来实现一个功能，但是我们需要一种简单、高效的方式来实现它，使得系统能够非常灵活，这就是策略模式。</p><p>所以策略模式就是定义了算法族，分别封装起来，让他们之前可以互相转换，此模式然该算法的变化独立于使用算法的客户。</p><p>在策略模式中它将这些解决问题的方法定义成一个算法群，每一个方法都对应着一个具体的算法，这里的一个算法我就称之为一个策略。虽然策略模式定义了算法，但是它并不提供算法的选择，即什么算法对于什么问题最合适这是策略模式所不关心的，所以对于策略的选择还是要客户端来做。客户必须要清楚的知道每个算法之间的区别和在什么时候什么地方使用什么策略是最合适的，这样就增加客户端的负担。</p><p>同时策略模式也非常完美的符合了“开闭原则”，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。但是一个策略对应一个类将会是系统产生很多的策略类。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201730.png"></p><p>策略模式包含如下角色：<br>Context: 环境类<br>Strategy: 抽象策略类<br>ConcreteStrategy: 具体策略类</p><p>16.状态模式                                                                        </p><p> 在很多情况下我们对象的行为依赖于它的一个或者多个变化的属性，这些可变的属性我们称之为状态，也就是说行为依赖状态，即当该对象因为在外部的互动而导致他的状态发生变化，从而它的行为也会做出相应的变化。对于这种情况，我们是不能用行为来控制状态的变化，而应该站在状态的角度来思考行为，即是什么状态就要做出什么样的行为。这个就是状态模式。</p><p>所以状态模式就是允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。</p><p>在状态模式中我们可以减少大块的if…else语句，它是允许态转换逻辑与状态对象合成一体，但是减少if…else语句的代价就是会换来大量的类，所以状态模式势必会增加系统中类或者对象的个数。</p><p>同时状态模式是将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。但是这样就会导致系统的结构和实现都会比较复杂，如果使用不当就会导致程序的结构和代码混乱，不利于维护。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201750.png"></p><p> 状态模式包含如下角色：<br>Context: 环境类<br>State: 抽象状态类<br>ConcreteState: 具体状态类</p><p>17.观察者模式                                                                      </p><p>何谓观察者模式？观察者模式定义了对象之间的一对多依赖关系，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并且自动更新。</p><p>在这里，发生改变的对象称之为观察目标，而被通知的对象称之为观察者。一个观察目标可以对应多个观察者，而且这些观察者之间没有相互联系，所以么可以根据需要增加和删除观察者，使得系统更易于扩展。所以观察者提供了一种对象设计，让主题和观察者之间以松耦合的方式结合。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201815.png"></p><p> 观察者模式包含如下角色：<br>Subject: 目标<br>ConcreteSubject: 具体目标<br>Observer: 观察者<br>ConcreteObserver: 具体观察者</p><p>18.备忘录模式                                                                     </p><p> 后悔药人人都想要，但是事实却是残酷的，根本就没有后悔药可买，但是也不仅如此，在软件的世界里就有后悔药！备忘录模式就是一种后悔药，它给我们的软件提供后悔药的机制，通过它可以使系统恢复到某一特定的历史状态。</p><p>所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。它实现了对信息的封装，使得客户不需要关心状态保存的细节。保存就要消耗资源，所以备忘录模式的缺点就在于消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201834.png"></p><p>备忘录模式包含如下角色：<br>Originator: 原发器<br>Memento: 备忘录<br>Caretaker: 负责人</p><p>19.中介者模式                                                                     </p><p> 租房各位都有过的经历吧！在这个过程中中介结构扮演着很重要的角色，它在这里起到一个中间者的作用，给我们和房主互相传递信息。在外面软件的世界里同样需要这样一个中间者。在我们的系统中有时候会存在着对象与对象之间存在着很强、复杂的关联关系，如果让他们之间有直接的联系的话，必定会导致整个系统变得非常复杂，而且可扩展性很差！在前面我们就知道如果两个类之间没有不必彼此通信，我们就不应该让他们有直接的关联关系，如果实在是需要通信的话，我们可以通过第三者来转发他们的请求。同样，这里我们利用中介者来解决这个问题。</p><p>所谓中介者模式就是用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。在中介者模式中，中介对象用来封装对象之间的关系，各个对象可以不需要知道具体的信息通过中介者对象就可以实现相互通信。它减少了对象之间的互相关系，提供了系统可复用性，简化了系统的结构。</p><p> 在中介者模式中，各个对象不需要互相知道了解，他们只需要知道中介者对象即可，但是中介者对象就必须要知道所有的对象和他们之间的关联关系，正是因为这样就导致了中介者对象的结构过于复杂，承担了过多的职责，同时它也是整个系统的核心所在，它有问题将会导致整个系统的问题。所以如果在系统的设计过程中如果出现“多对多”的复杂关系群时，千万别急着使用中介者模式，而是要仔细思考是不是您设计的系统存在问题。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201859.png"></p><p>Mediator: 抽象中介者<br>ConcreteMediator: 具体中介者<br>Colleague: 抽象同事类<br>ConcreteColleague: 具体同事类</p><p>20.迭代器模式                                                                     </p><p>对于迭代在编程过程中我们经常用到，能够游走于聚合内的每一个元素，同时还可以提供多种不同的遍历方式，这就是迭代器模式的设计动机。在我们实际的开发过程中，我们可能会需要根据不同的需求以不同的方式来遍历整个对象，但是我们又不希望在聚合对象的抽象接口中充斥着各种不同的遍历操作，于是我们就希望有某个东西能够以多种不同的方式来遍历一个聚合对象，这时迭代器模式出现了。</p><p>何为迭代器模式？所谓迭代器模式就是提供一种方法顺序访问一个聚合对象中的各个元素，而不是暴露其内部的表示。迭代器模式是将迭代元素的责任交给迭代器，而不是聚合对象，我们甚至在不需要知道该聚合对象的内部结构就可以实现该聚合对象的迭代。</p><p>通过迭代器模式，使得聚合对象的结构更加简单，它不需要关注它元素的遍历，只需要专注它应该专注的事情，这样就更加符合单一职责原则了。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201920.png"></p><p>迭代器模式包含如下角色：<br>Iterator: 抽象迭代器<br>ConcreteIterator: 具体迭代器<br>Aggregate: 抽象聚合类<br>ConcreteAggregate: 具体聚合类</p><p>21.解释器模式                                                                     </p><p>所谓解释器模式就是定义语言的文法，并且建立一个解释器来解释该语言中的句子。解释器模式描述了如何构成一个简单的语言解释器，主要应用在使用面向对象语言开发的编译器中。它描述了如何为简单的语言定义一个文法，如何在该语言中表示一个句子，以及如何解释这些句子。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201939.png"></p><p>解释器模式包含如下角色：<br>AbstractExpression: 抽象表达式<br>TerminalExpression: 终结符表达式<br>NonterminalExpression: 非终结符表达式<br>Context: 环境类<br>Client: 客户类</p><p>22.命令模式                                                                      </p><p> 有些时候我们想某个对象发送一个请求，但是我们并不知道该请求的具体接收者是谁，具体的处理过程是如何的，们只知道在程序运行中指定具体的请求接收者即可，对于这样将请求封装成对象的我们称之为命令模式。所以命令模式将请求封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。同时命令模式支持可撤销的操作。</p><p>命令模式可以将请求的发送者和接收者之间实现完全的解耦，发送者和接收者之间没有直接的联系，发送者只需要知道如何发送请求命令即可，其余的可以一概不管，甚至命令是否成功都无需关心。同时我们可以非常方便的增加新的命令，但是可能就是因为方便和对请求的封装就会导致系统中会存在过多的具体命令类。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508201958.png"></p><p>命令模式包含如下角色：<br>Command: 抽象命令类<br>ConcreteCommand: 具体命令类<br>Invoker: 调用者<br>Receiver: 接收者<br>Client:客户类</p><p>23.责任链模式                                                                    </p><p>职责链模式描述的请求如何沿着对象所组成的链来传递的。它将对象组成一条链，发送者将请求发给链的第一个接收者，并且沿着这条链传递，直到有一个对象来处理它或者直到最后也没有对象处理而留在链末尾端。</p><p>避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止，这就是职责链模式。在职责链模式中，使得每一个对象都有可能来处理请求，从而实现了请求的发送者和接收者之间的解耦。同时职责链模式简化了对象的结构，它使得每个对象都只需要引用它的后继者即可，而不必了解整条链，这样既提高了系统的灵活性也使得增加新的请求处理类也比较方便。但是在职责链中我们不能保证所有的请求都能够被处理，而且不利于观察运行时特征。</p><p><img src="https://images2017.cnblogs.com/blog/401339/201709/401339-20170929212323622-1583713986.png" alt="img"></p><p>职责链模式包含如下角色：<br>Handler: 抽象处理者<br>ConcreteHandler: 具体处理者<br>Client: 客户类</p><p><strong>五、如何学习设计模式</strong>                                                              </p><p><strong>说明，《如何学习设计模式》转摘自：<a href="http://blog.csdn.net/yqj2065/article/details/39103857">http://blog.csdn.net/yqj2065/article/details/39103857</a></strong></p><h3 id="①-学习技巧"><a href="#①-学习技巧" class="headerlink" title="①  学习技巧"></a>①  学习技巧</h3><p>学习设计模式时，有一些技巧能够帮助你快速理解设计模式。</p><p>a)  使用较简单的<strong>面向对象的语言</strong>如Java、C#。GoF的[设计模式]实质上是<strong>面向对象的设计模式</strong>。[GoF·1.1]中提到“程序设计语言的选择非常重要，它将影响人们理解问题的出发点”。从学习设计模式的角度看，Java和C#较C++更容易一些。比如Java接口等，能够更有效展现设计模式的意图。</p><p>b)  使用<strong>工具BlueJ</strong>。BlueJ最大的好处，就是提供了简单的类图。正如我在<a href="http://blog.csdn.net/column/details/dp-in-java-yqj2065.html">简明设计模式Java</a>中所做的，较少去专门画类图，而是在BlueJ中截图。在学生上机编写演示程序时，常常先看他的类图，以判断他的程序是否正确，必要时再看源代码。</p><p>c)  日常生活的<strong>隐喻</strong>。用一些实际生活中的例子来说明某某模式，能够让你快速掌握某模式的目的和实现代码的结构。同时，你要认识到，这种隐喻如同告诉你（2+3）2&#x3D;22+2<em>2</em>3+32，你需要自己举一反三，得出（a+b）2&#x3D;a2+2ab+b2。在实际工作中的模式的具体应用，则相当于应用代数公式。</p><p>d)   <strong>动手实践和怀疑精神</strong>。看<strong>显浅的参考书或上网查阅资料</strong>时，要自己敲(复制也可以)代码并运行，要多修改别人的源代码提出自己的观点：为什么书中不这样设计、为什么要那样设计；如果增添一些方法、方法参数、或成员变量会如何？必须要自己亲自动手，最起码要运行。另外，要敢于向博主提问、拍砖。你甚至可以质疑GoF的某些章节的解说和意图，更何况一些博主呢。</p><h3 id="②-基础知识"><a href="#②-基础知识" class="headerlink" title="②  基础知识"></a>②  基础知识</h3><p>这些知识让你知道，设计模式好在何处。</p><p>a)  <strong>面向对象范式</strong>。也就是人们传说的思想。封装、继承和多态这些东西，在我看来比if、for等稍微高一点，也属于语法问题。面向对象编程要掌握的<a href="http://blog.csdn.net/yqj2065/article/details/8502681">三大原则</a>是<strong>柏拉图(Plato)原则、里氏(Liskov)替换原则和Parnas原则</strong>。这三个原则其实非常简单。任何原则，你觉得很难一见钟情，很难快速认同，那它就不会是好原则。</p><p>b)  <strong>设计原则。</strong>许多人列举了7大原则，如单一职责原则、开闭原则、里氏代换原则、依赖倒转原则、接口隔离原则、合成复用原则、迪米特法则。LSP，我将它提升为面向对象范式的3大基石之一；单一职责和接口隔离，主要作为面向对象分析&#x2F;OOA时职责划分所遵循的原则，此时你可以不太在意。依赖倒转原则，我把它作为垃圾扔掉，因为<strong>开闭原则或者直接地说“依赖于抽象类型原则”</strong>已经包含了依赖倒转原则的精华，而依赖倒转原则的糟粕由IoC继承。当然，<a href="http://blog.csdn.net/yqj2065/article/details/8758101">回调</a>，我很强调。所以，你要掌握的有**抽象依赖原则(OCP)、单向依赖原则(含对回调的学习)和最低依赖原则(合成复用原则、迪米特法则)**。</p><p>c)   UML的初步了解。这是学习设计模式的工具。在早期，你甚至可以仅了解BlueJ的相关图示，也就10分钟的事情。</p><h3 id="③-境界"><a href="#③-境界" class="headerlink" title="③  境界"></a>③  境界</h3><p>《五灯会元》卷十七中，有一则唐朝禅师青原惟信禅师的语录:“老僧三十年前未参禅时，见山是山，见水是水。及至后来亲见知识，有个入处，见山不是山，见水不是水。而今得个休歇处，依前见山只是山，见水只是水。”</p><p>a)   仔细研究GoF的[设计模式]，逐个学习其<strong>意图和结构</strong>，是一个抱着字典学习英语的方式。见山是山，见水是水，导致你可能在实际工作中生搬硬套、东施效颦。</p><p>b)   建议从简单的场景出发，<strong>自己发现或设计出某种模式</strong>。你从中体会该模式是如何解决问题的，这样，该模式成为你自己的东西，你才不会出现<strong>知易行难</strong>的问题。所有的设计模式不过是基本原则和理念在特定场合的应用。你可能不知道某个设计模式的名字，但是你知道它一切的优缺点和变体以及应用场合。见山不是山，见水不是水。</p><p>c)   你对<strong>基本原则和理念</strong>融会贯通，你可以惋惜：“我找到一种模式，原来在<a href="%E5%85%B6%E5%AE%9E%E6%98%AF%E6%9F%90%E4%B8%AA%E7%89%B9%E6%AE%8A%E7%9A%84%E4%B9%A6%E3%80%81%E6%96%87%E7%AB%A0%E6%8F%90%E5%88%B0%E7%9A%84%E6%A8%A1%E5%BC%8F">设计模式</a>中早就有了这种模式”。这时，模式不模式又如何呢？反模式又怎样。看见一个模式，你会说：“嗯，这是一种有用的模式”。见山只是山，见水只是水。</p><p>以上一点浅见。</p><hr><p>注：【】中的内容是我加的。</p><p>1 转录【IT168知识库】</p><p>​     发现很多初学设计模式的人都有一些特点就是学习了某个设计模式之后，<strong>貌似理解了，但是却不知道怎么去使用</strong>这些所谓的精华经验，苦于不知如何下手。我最初学习设计模式的时候也有类似的经验，我将我的经验分享出来，希望能对初学者有帮助。<br>​    我对设计模式产生兴趣是在大概一年以前，最初看书的时候好像是看懂了，大概知道他在说什么。看了几个模式之后就开始寻找时机来套用套用这些模式。结果是除了Singleton模式以外的其他模式都没有找到应用的场所。然后我就没开始看下去了，我知道再看也没用，但是我并没有放弃对设计模式的关注。<br>​    不久我就在MSDN的Webcast上看到李建忠的 C#面向对象设计模式纵横谈讲座，很不错的系列讲座，让我对设计模式有了新的理解。我<strong>意识到学习设计模式，确切的讲是学习面向对象的设计模式，应该从学习面向对象开始</strong>。【<strong>面向对象的原理如同了解下象棋的规则，而设计模式相当于残局，不知道规则看什么残局</strong>】由于之前一年都在做asp.net开发，虽然都是在写类、学着duwamish搞分层架构、搞类型化DataSet、也弄过自定义实体类，但好像一年下来还没怎么用过接口，什么多态也是极少用。事实上对面向对象的编程思想的认识还是很模糊的。<br>​    重新认识OO：面向对象编程是一种思想，以面向对象的思维来思考软件设计结构，从而强化面向对象的编程范式。面向对象的特点是封装，继承，多态【<strong>这些也算？</strong>】。所以从那是开始，当我设计一个类的时候，不断的提示自己以下三点：<br>第一：别把自己的数据公开，除非你要向别人提供数据，使用尽量低的访问权限。<br>第二：以一个外部的视角来看类，紧记不要要求别人要在知道你是怎么实现一个方法之后才能使用我的类。<br>第三：分清类的职责，该这个类做的事情就要在这个类中实现，不该我的类做的事情就让别的类去实现。<br>在这三点的指导下来写类，写程序开始像在做“设计”了^_^。<br>一段时间后对设计模式就慢慢有感觉了，并能够找到一些设计模式的应用场景了。并常套用套用那些模式，逐渐的加深对模式的理解，并把它变成自己的东西，能够在其他的地方灵活的用起来。</p><ol start="2"><li>转录 《易学设计模式·1.4  如何学习设计模式》郭志学 人民邮电出版社</li></ol><p>如何学习设计模式<br>在了解了设计模式的历史和分类后，应该如何学习设计模式呢？在学习设计模式之前，读者一定要树立一种意识，那就是：<strong>设计模式并不只是一种方法和技术，它更是一种思想、一个方法论。</strong>它和具体的语言没有关系，学习设计模式<strong>最主要的目的就是要建立</strong>面向对象的思想，尽可能地面向接口编程、低耦合、高内聚，使你设计的程序尽可能地复用。【<strong>似是而非。学习设计模式能够更好理解面向对象的思想，设计模式是一些设计的技巧和窍门，不要上升到思想、方法论好不好</strong>】<br>有些软件开发人员，在程序设计时，总想着往某个设计模式上套，其实这样是不对的，并没有真正掌握设计模式的思想。其实很多时候读者用了某种设计模式，只是自己不知道这个模式叫什么名字而已。因此，在程序设计时，要根据自己的理解，使用合适的设计模式。<br>而有另外一些软件开发人员，在程序设计时，动不动就给类起个类似模式的名字，比如叫某某Facade、某某Factory等，其实类里面的内容和设计模式根本没有一点关系，只是用来标榜自己懂设计模式而已。<br>因此，学习设计模式，首先要了解有哪些方面的设计模式可以供开发人员使用，然后再分别研究每个设计模式的原理，使用时机和方法，也就是说要在什么情况下才使用某个设计模式，在了解某个设计模式的使用时机时，还要了解此时如果不使用这个设计模式，会造成什么样的后果。当对每个模式的原理和使用方法都了解了<strong>以后</strong>，更重要的是，学习面向对象的思想方式，在掌握面向对象的思想方式后，再回过头来看设计模式，就会有更深刻的理解，<strong>最后，学习设计模式，一定要勤学多练</strong>。【就最后一句很赞同】</p><p><em><strong>*六、个人感悟*</strong></em>                                                         </p><p>学习设计模式确实有几种境界：</p><p>第一种是学习了一两个设计模式，就一直想用到自己的代码中去；</p><p>第二种是学完全部设计模式，觉得很多模式都很相似，分不清楚它们之间有什么区别；</p><p>第三种是灵活运用设计模式，就算不用具体哪种模式也可以设计也高质量的代码，无剑胜有剑。</p><p>最后附上总结图：</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed/img/20220508202133.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL之groupby优化</title>
    <link href="/2022/05/07/MySQL%E4%B9%8Bgroupby%E4%BC%98%E5%8C%96/"/>
    <url>/2022/05/07/MySQL%E4%B9%8Bgroupby%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed//img/20220507222923.png"></p><p>binlog是在那一层？</p><p>server层</p><p>CREATE TABLE <code>t1</code> (</p><p> <code>id</code> int(11) NOT NULL,</p><p> <code>a</code> int(11) DEFAULT NULL,</p><p> <code>b</code> int(11) DEFAULT NULL</p><p> PRIMARY KEY (<code>id</code>),</p><p> KEY <code>a</code> (<code>a</code>)</p><p>) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8</p><p>delimiter ;;</p><p>create procedure idata()</p><p>begin</p><p>  declare i int;</p><p>  set i &#x3D; 1;</p><p>  while(i &lt;&#x3D; 1000)</p><p>​    do</p><p>​      insert into t1 values (i, i, i);</p><p>​      set i &#x3D; i + 1;</p><p>​    end while;</p><p>end;;</p><p>delimiter ;</p><p>call idata();</p><p>select id%10 as m, count(*) as c from t1 <strong>group by</strong> m;</p><p>这个语句的执行流程是这样的：</p><p>1、创建内存临时表，表里有两个字段 m 和 c，主键是 m；</p><p>2、扫描表 t1 的索引 a，依次取出叶子节点上的 id 值，计算 id%10 的结果，记为 x；</p><p>   a）如果临时表中没有主键为 x 的行，就插入一个记录 (x,1);</p><p>   b）如果表中有主键为 x 的行，就将 x 这一行的 c 值加 1；</p><p>3、遍历完成后，再根据字段 m 做排序，得到结果集返回给客户端。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed//img/20220507223257.png"></p><p>Using index，表示这个语句使用了覆盖索引，选择了索引 a，不需要回表；</p><p>Using temporary，表示使用了临时表；</p><p>Using filesort，表示需要排序。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed//img/20220507223321.png"></p><p><strong>group by****优化方法</strong> <strong>– order by null</strong></p><p>如果你的需求并不需要对结果进行排序，那你可以在 SQL 语句末尾增加 order by null，也就是改成：</p><p>select id%10 as m, count(*) as c from t1 group by m order by null;</p><p>这样就跳过了最后排序的阶段，直接从临时表中取数据返回</p><p>![image-20220507223458587](&#x2F;Users&#x2F;npc&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220507223458587.png)</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed//img/20220507223511.png"></p><p>这个例子里由于临时表只有 10 行，内存可以放得下，因此全程只使用了内存临时表。但是，内存临时表的大小是有限制的，参数 tmp_table_size 就是控制这个内存大小的，默认是 16M。</p><p>set tmp_table_size&#x3D;1024;  （byte）</p><p>select id%100 as m, count(*) as c from t1 group by m order by null limit 10;</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed//img/20220507231152.png"></p><p>group + order by null 的结果（磁盘临时表）</p><p>执行 group by 语句为什么需要临时表？</p><p>group by 的语义逻辑，是统计不同的值出现的个数。但是，由于每一行的 id%100 的结果是无序的，所以我们就需要有一个临时表，来记录并统计结果。</p><p><strong>group by****优化方法</strong> <strong>–</strong> <strong>索引</strong></p><p>如果可以确保输入的数据是有序的，那么计算 group by 的时候，就只需要从左到右，顺序扫描，依次累加。InnoDB 的索引，就可以满足这个输入有序的条件。</p><p>alter table t1 add column z int generated always as(id % 100), add index(z);</p><p>sql变成这样：select z, count(*) as c from t1 group by z;</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed//img/20220507231238.png"></p><p>如果是 MySQL 5.6 及之前的版本，你也可以创建普通列和索引，来解决这个问题</p><p><strong>group by****优化方法</strong> <strong>–</strong> <strong>直接排序</strong></p><p>但是，如果碰上不适合创建索引的场景，我们还是要老老实实做排序的。那么，这时候的 group by 要怎么优化呢？</p><p>在 group by 语句中加入 SQL_BIG_RESULT 这个提示（hint），就可以告诉优化器：这个语句涉及的数据量很大，请直接用磁盘临时表。</p><p>MySQL 的优化器一看，磁盘临时表是 B+ 树存储，存储效率不如数组来得高。所以，既然你告诉我数据量很大，那从磁盘空间考虑，还是直接用数组来存吧。</p><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed//img/20220507233952.png"></p><p><strong>总结：<strong><strong>group by</strong></strong>使用的指导原则：</strong></p><p>1、如果对 group by 语句的结果没有排序要求，要在语句后面加 order by null；</p><p>2、尽量让 group by 过程用上表的索引，确认方法是 explain 结果里没有 Using temporary 和 Using filesort；</p><p>3、如果 group by 需要统计的数据量不大，尽量只使用内存临时表；也可以通过适当调大 tmp_table_size 参数，来避免用到磁盘临时表；</p><p>4、如果数据量实在太大，使用 SQL_BIG_RESULT 这个提示，来告诉优化器直接使用排序算法得到 group by 的结果。</p><p><strong>思考：</strong></p><p>都是 order by null，</p><p>为什么 8 的返回结果里面，0 是在结果集的最后一行，</p><p>而9 的结果里面，0 是在结果集的第一行？</p><p>参考资料：</p><p><a href="https://time.geekbang.org/column/article/80477">https://time.geekbang.org/column/article/80477</a></p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/group-by-optimization.html">https://dev.mysql.com/doc/refman/8.0/en/group-by-optimization.html</a></p><p><a href="http://mdba.cn/2014/03/25/mysql%E6%9D%BE%E6%95%A3%E7%B4%A2%E5%BC%95%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%B4%A7%E5%87%91%E7%B4%A2%E5%BC%95%E6%89%AB%E6%8F%8F/">http://mdba.cn/2014/03/25/mysql%E6%9D%BE%E6%95%A3%E7%B4%A2%E5%BC%95%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%B4%A7%E5%87%91%E7%B4%A2%E5%BC%95%E6%89%AB%E6%8F%8F/</a></p><p>高性能MySQL第三版，P235</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我曾七次鄙视自己的灵魂</title>
    <link href="/2022/05/07/%E6%88%91%E6%9B%BE%E4%B8%83%E6%AC%A1%E9%84%99%E8%A7%86%E8%87%AA%E5%B7%B1%E7%9A%84%E7%81%B5%E9%AD%82/"/>
    <url>/2022/05/07/%E6%88%91%E6%9B%BE%E4%B8%83%E6%AC%A1%E9%84%99%E8%A7%86%E8%87%AA%E5%B7%B1%E7%9A%84%E7%81%B5%E9%AD%82/</url>
    
    <content type="html"><![CDATA[<p>我曾七次鄙视自己的灵魂：</p><p>第一次，当它本可进取时，却故作谦卑；</p><p> 第二次，当它在空虚时，用爱欲来填充；</p><p>第三次，在困难和容易之间，它选择了容易 ；</p><p>第四次，它犯了错，却借由别人也会犯错来宽慰自己；</p><p>第五次，它自由软弱，却把它认为是生命的坚韧 ；</p><p>第六次，当它鄙夷一张丑恶的嘴脸时，却不知那正是自己面具中的一副；</p><p>第七次，它侧身于生活的污泥中，虽不甘心，却又畏首畏尾。 </p>]]></content>
    
    
    <categories>
      
      <category>诗词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人生十商</title>
    <link href="/2022/05/07/%E4%BA%BA%E7%94%9F%E5%8D%81%E5%95%86/"/>
    <url>/2022/05/07/%E4%BA%BA%E7%94%9F%E5%8D%81%E5%95%86/</url>
    
    <content type="html"><![CDATA[<p>人生之根——“心商”、“德商”、“志商”</p><p>人生之干——“智商”、“情商”、“逆商”、“灵商”、“胆商”</p><p>人生之果——“财商”、“健商”</p>]]></content>
    
    
    <categories>
      
      <category>感悟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sharding-Jdbc</title>
    <link href="/2022/05/07/Sharding-Jdbc/"/>
    <url>/2022/05/07/Sharding-Jdbc/</url>
    
    <content type="html"><![CDATA[<p>什么是Sharding-Jdbc</p><p>•Sharding-JDBC为轻量级Java框架，在Java的JDBC层提供的额外服务。 它 使用客户端直连数据库，以jar包形式提供服务，无需额外部署和依赖，可理 解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。</p><p>关键技术点：</p><p>分片路由</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>数据库-分库分表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高性能框架Disruptor</title>
    <link href="/2022/05/07/%E9%AB%98%E6%80%A7%E8%83%BD%E6%A1%86%E6%9E%B6Disruptor/"/>
    <url>/2022/05/07/%E9%AB%98%E6%80%A7%E8%83%BD%E6%A1%86%E6%9E%B6Disruptor/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java-框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux资源管理之cgroups</title>
    <link href="/2022/05/07/Linux%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E4%B9%8Bcgroups/"/>
    <url>/2022/05/07/Linux%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E4%B9%8Bcgroups/</url>
    
    <content type="html"><![CDATA[<h3 id="一．cgroups-的概念及原理"><a href="#一．cgroups-的概念及原理" class="headerlink" title="一．cgroups 的概念及原理"></a>一．cgroups 的概念及原理</h3><p>cgroups(Control Groups) 是 linux 内核提供的一种机制，这种机制可以根据需求把一系列系统任务及其子任务整合(或分隔)到按资源划分等级的不同组内，从而为系统资源管理提供一个统一的框架。</p><h4 id="四大功能："><a href="#四大功能：" class="headerlink" title="四大功能："></a>四大功能：</h4><p>资源限制 优先级分配 资源统计 任务控制</p><h4 id="Tips：容器-x3D-cgroup-namespace-rootfs-容器引擎"><a href="#Tips：容器-x3D-cgroup-namespace-rootfs-容器引擎" class="headerlink" title="Tips：容器 &#x3D; cgroup + namespace + rootfs + 容器引擎"></a>Tips：容器 &#x3D; cgroup + namespace + rootfs + 容器引擎</h4><p>•cgroup： 资源控制</p><p>•namespace： 访问隔离</p><p>•rootfs：文件系统隔离。镜像的本质就是一个rootfs文件</p><p>•容器引擎：生命周期控制</p><h4 id="cgroups为每种可以控制的资源定义了一个子系统。典型的子系统介绍如下"><a href="#cgroups为每种可以控制的资源定义了一个子系统。典型的子系统介绍如下" class="headerlink" title="cgroups为每种可以控制的资源定义了一个子系统。典型的子系统介绍如下:"></a>cgroups为每种可以控制的资源定义了一个子系统。典型的子系统介绍如下:</h4><p>1.cpu 子系统，主要限制进程的 cpu 使用率。</p><p>2.cpuacct 子系统，可以统计 cgroups 中的进程的 cpu 使用报告。</p><p>3.cpuset 子系统，可以为 cgroups 中的进程分配单独的 cpu 节点或者内存节点。</p><p>4.memory 子系统，可以限制进程的 memory 使用量。</p><p>5.blkio 子系统，可以限制进程的块设备 io。</p><p>6.devices 子系统，可以控制进程能够访问某些设备。</p><p>7.net_cls 子系统，可以标记 cgroups 中进程的网络数据包，然后可以使用 tc 模块（traffic control）对数据包进行控制。</p><p>8.freezer 子系统，可以挂起或者恢复 cgroups 中的进程。</p><p>9.ns 子系统，可以使不同 cgroups 下面的进程使用不同的 namespace</p><h4 id="cgroup层级结构"><a href="#cgroup层级结构" class="headerlink" title="cgroup层级结构"></a>cgroup层级结构</h4><p>每一个层级结构中是一颗树形结构，树的每一个节点是一个 cgroup 子系统。</p><h4 id="cgroups与进程"><a href="#cgroups与进程" class="headerlink" title="cgroups与进程"></a>cgroups与进程</h4><p>css_set(cgroups subsystem set):辅助数据结构。</p><p>一个进程只能隶属于一个css_set,隶属于同一个css_set的进程受到同一个css_set所关联的资源限制。</p><p>总结：进程和cgroup结构体是多对多的关系。</p><h3 id="二．cgroups-文件系统概念及原理"><a href="#二．cgroups-文件系统概念及原理" class="headerlink" title="二．cgroups 文件系统概念及原理"></a>二．cgroups 文件系统概念及原理</h3><p>Linux通过文件的方式，将cgroups的功能和配置暴露给用户，这得益于Linux的虚拟文件系统（VFS）。VFS将具体文件系统的细节隐藏起来，给用户态提供一个统一的文件系统API接口，cgroups和VFS之间的链接部分，称之为cgroups文件系统。</p><p>用户在用户态对 cgroups 文件系统的操作，通过 VFS 转化为对 cgroups 层级结构的维护。通过这样的方式，内核把 cgroups 的功能暴露给了用户态的进程。</p><h3 id="三．cgroups-使用方法介绍"><a href="#三．cgroups-使用方法介绍" class="headerlink" title="三．cgroups 使用方法介绍"></a>三．cgroups 使用方法介绍</h3><p>cgroup简单使用</p><p>1.创建隔离组 mkdir &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;cpu_test(目录无法手动删除，如果不加入开机自启，重启后会消失)</p><p>2.限制使用率为20% echo 20000 &gt; &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;cpu_test&#x2F;cpu.cfs_quota_us</p><p>3.将进程pid添加到tasks中 echo 2938 &gt;&gt; &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;cpu_test&#x2F;tasks</p><p>Tips: <a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/resource_management_guide/chap-using_libcgroup_tools">使用libgroup-tools对cgroups进行操作</a>。</p><h3 id="四．cgroups-实践中的例子"><a href="#四．cgroups-实践中的例子" class="headerlink" title="四．cgroups 实践中的例子"></a>四．cgroups 实践中的例子</h3><p>•es权威指南：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html</a></p><p>•es性能优化详解：<a href="https://pdai.tech/md/db/nosql-es/elasticsearch-y-peformance.html">https://pdai.tech/md/db/nosql-es/elasticsearch-y-peformance.html</a></p><p>•Lucene结构：<a href="https://lucene.apache.org/core/7_2_1/core/org/apache/lucene/codecs/lucene70/package-summary.html#package.description">https://lucene.apache.org/core/7_2_1/core/org/apache/lucene/codecs/lucene70/package-summary.html#package.description</a></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL高可用架构（上）</title>
    <link href="/2022/05/07/MySQL%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/2022/05/07/MySQL%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="MySQL-的-“量子纠缠”"><a href="#MySQL-的-“量子纠缠”" class="headerlink" title="MySQL 的 “量子纠缠”"></a>MySQL 的 “量子纠缠”</h3><h4 id="1、MySQL-版本的前世今生"><a href="#1、MySQL-版本的前世今生" class="headerlink" title="1、MySQL 版本的前世今生"></a>1、MySQL 版本的前世今生</h4><p>版本选择 - MySQL Community Server 5.7.32</p><p>![image-20220507105656304](&#x2F;Users&#x2F;npc&#x2F;Desktop&#x2F;IDEAWorkSpace&#x2F;ops&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;MySQL高可用架构&#x2F;:Users:npc:Library:Application Support:typora-user-images:image-20220507105656304.png)</p><p>数据库排名</p><p>![image-20220507105805297](&#x2F;Users&#x2F;npc&#x2F;Desktop&#x2F;IDEAWorkSpace&#x2F;ops&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;MySQL高可用架构&#x2F;:Users:npc:Library:Application Support:typora-user-images:image-20220507105805297.png)</p><p>MySQL产品的生命周期</p><p>![image-20220507105839517](&#x2F;Users&#x2F;npc&#x2F;Desktop&#x2F;IDEAWorkSpace&#x2F;ops&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;MySQL高可用架构&#x2F;:Users:npc:Library:Application Support:typora-user-images:image-20220507105839517.png)</p><p>2、MySQL 主从复制技术</p><p>MySQL HA解决方案，你需要?个9</p><p><img src="/Users/npc/Desktop/IDEAWorkSpace/ops/blog/source/_posts/MySQL%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84/:Users:npc:Downloads:20220507-105955@2x.png" alt="20220507-105955@2x"></p><p>主从复制技术</p><p>•异步复制</p><p>•半同步复制</p><p>•组复制</p><p>MySQL中有7种日志文件:</p><p>•重做日志（redo log）</p><p>•回滚日志（undo log)</p><p>•二进制日志（bin log）</p><p>•错误日志（error log）</p><p>•慢查询日志（slow query log）</p><p>•一般查询日志（general log）</p><p>•中继日志（relay log）</p><h4 id="MySQL-Semi-Synchronous-Replication"><a href="#MySQL-Semi-Synchronous-Replication" class="headerlink" title="MySQL Semi-Synchronous Replication"></a>MySQL Semi-Synchronous Replication</h4><h4 id="•同步模式"><a href="#•同步模式" class="headerlink" title="•同步模式"></a>•同步模式</h4><p>•优点: master和slave之间是强一致的</p><p>•缺点: master每次都要等到slave返回，性能不敢恭维，特别是多slave时</p><h4 id="•异步模式"><a href="#•异步模式" class="headerlink" title="•异步模式"></a>•异步模式</h4><p>•优点: master和slave无太多相关性，各干各的，不存在影响整体性能</p><p>•缺点: master和slave之间可能有日志同步不一致</p><h4 id="•半同步模式"><a href="#•半同步模式" class="headerlink" title="•半同步模式"></a>•半同步模式</h4><p>•各取其长的模式</p><p>•半同步模式采用了同步模式的方法，要求至少一个slave返回OK后，master才返回给用户</p><p>•如果只有一个slave，就是同步模型</p><p>•目前MySQL默认支持的是异步模式(同步是第三方支持的)</p><h2 id="MySQL主从同步技术"><a href="#MySQL主从同步技术" class="headerlink" title="MySQL主从同步技术"></a>MySQL主从同步技术</h2><p>![image-20220507110625798](&#x2F;Users&#x2F;npc&#x2F;Desktop&#x2F;IDEAWorkSpace&#x2F;ops&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;MySQL高可用架构&#x2F;:Users:npc:Library:Application Support:typora-user-images:image-20220507110625798.png)</p><p>1.从库有两个线程，一个I&#x2F;O线程，一个SQL线程<br>2.从库的I&#x2F;O线程去请求主库的binlog<br>3.主库把数据的更改记录到自己的binlog<br>4.主库会生成一个log dump线程，用来给从库的I&#x2F;O线程传binlog<br>5.从库得到主库发送的binlog并写入到自己的relay log中<br>6.从库的SQL线程会读取relay log，并解析成具体的操作执行，重做应用中继日志中的SQL语句，达到主从的数据一致</p><p>一些重要的配置参数</p><p>![image-20220507110700398](&#x2F;Users&#x2F;npc&#x2F;Desktop&#x2F;IDEAWorkSpace&#x2F;ops&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;MySQL高可用架构&#x2F;:Users:npc:Library:Application Support:typora-user-images:image-20220507110700398.png)</p><h3 id="异步复制"><a href="#异步复制" class="headerlink" title="异步复制"></a>异步复制</h3><p>![image-20220507110737343](&#x2F;Users&#x2F;npc&#x2F;Desktop&#x2F;IDEAWorkSpace&#x2F;ops&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;MySQL高可用架构&#x2F;:Users:npc:Library:Application Support:typora-user-images:image-20220507110737343.png)</p><h3 id="半同步复制-Semisynchronous-Replication"><a href="#半同步复制-Semisynchronous-Replication" class="headerlink" title="半同步复制 (Semisynchronous Replication)"></a>半同步复制 (Semisynchronous Replication)</h3><p>![image-20220507110803280](&#x2F;Users&#x2F;npc&#x2F;Desktop&#x2F;IDEAWorkSpace&#x2F;ops&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;MySQL高可用架构&#x2F;:Users:npc:Library:Application Support:typora-user-images:image-20220507110803280.png)</p><h3 id="组复制（MySQL-Group-Replication）"><a href="#组复制（MySQL-Group-Replication）" class="headerlink" title="组复制（MySQL Group Replication）"></a>组复制（MySQL Group Replication）</h3><p>![image-20220507110846500](&#x2F;Users&#x2F;npc&#x2F;Desktop&#x2F;IDEAWorkSpace&#x2F;ops&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;MySQL高可用架构&#x2F;:Users:npc:Library:Application Support:typora-user-images:image-20220507110846500.png)</p><p>多源复制</p><img src="/Users/npc/Desktop/IDEAWorkSpace/ops/blog/source/_posts/MySQL高可用架构/:Users:npc:Library:Application Support:typora-user-images:image-20220507110913877.png" alt="image-20220507110913877" style="zoom:67%;" /><p>MySQL 5.7引入的多源复制，可以把多个主服务器的数据同步到一台从服务器进行备份</p><h3 id="GTID"><a href="#GTID" class="headerlink" title="GTID"></a>GTID</h3><p>•GTID (Global Transaction ID) 是对于一个已提交事务的编号，并且是一个全局唯一的编号。 GTID 实际上 是由 UUID+TID 组成的。其中UUID 是一个 MySQL 实例的唯一标识,记录在$datadir&#x2F;auto.cnf。TID 代表了该实例上已经提交的事务数量，并且随着事务提交单调递增。</p><p>GTID:<br>GTID 是由 UUID+TID 组成的,UUID标识MySQL实例,TID 代表该实例上已提交的事务数量。<br>GTID 集合可以包含来自多个 MySQL 实例的事务，它们之间用逗号分隔。一组连续的事务可以用 - 连接的事务序号范围表示。<br>使用 SHOW MASTER STATUS 实时看当前的事务执行数。</p><p>server_id： 设置MySQL实例的server_id，每个server_id不能一样<br>gtid_mode&#x3D;ON： MySQL实例开启GTID模式<br>enforce_gtid_consitency&#x3D;ON：使用GTID模式复制时，需要开启，用来保证数据一致性。<br>log-bin: MySQL必须要开启binlog<br>log-slave-updates&#x3D;1：决定SLAVE从Master接收到更新且执行是否记录到SLAVE的binlog中<br>binlog_format&#x3D;ROW: binlog格式为row<br>skip-slave-start&#x3D;1(可选): 当SLAVE数据库启动的时候，SLAVE不会启动复制</p><h3 id="GTID有什么好处-Why"><a href="#GTID有什么好处-Why" class="headerlink" title="GTID有什么好处(Why)"></a>GTID有什么好处(Why)</h3><p>![image-20220507111220932](&#x2F;Users&#x2F;npc&#x2F;Desktop&#x2F;IDEAWorkSpace&#x2F;ops&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;MySQL高可用架构&#x2F;:Users:npc:Library:Application Support:typora-user-images:image-20220507111220932.png)</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>数据库-MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OKR和KPI</title>
    <link href="/2022/05/07/OKR%E5%92%8CKPI/"/>
    <url>/2022/05/07/OKR%E5%92%8CKPI/</url>
    
    <content type="html"><![CDATA[<p>OKR和KPI到底有什么重大的不同？经常会有同学问我这个问题，在我看来主要是三点，</p><p>第一点，透明。很多用KPI管理公司的同事，通常不希望让每个人指标向全员公开，为什么我的高，他的低压引起争论，甚至感觉可能会泄露公司的战略意图，OKR的基本原则，或者使用OKR公司的普遍文化，那就是透明。几万人的公司，你愿意的话，任何人都可以看到任何人的OK，包括CEO为什么一事。对其让所有人定目标的时候，左看右看上看下看，保持目标一致，力出一口。</p><p>第二点是协同，一起开会之前先看看对方的OK，知道怎么合作能帮到对方实现共同的目标。第二点是部分的自下而上，董事会会给CEO来定个KPICEO会给高管来定个KPI，层层想象，这样的KPI体系有分解和承接的功能。那并不能充分使用员工等全员的共创的智慧。OKR讲究部分的o和KR是由员工发起的，你发起的OKR也要支撑上级或者其他的OK，如果不支撑呢，上级觉得，这也是个不错的方向，他可能也会批准，这样才能利用大家的智慧，其中很多屋顶的，眼睛看不到的，地面的结合。</p><p>第三点，不考核。绝大部分使用KPI的公司都用KPI来考核员工，考核直接关联到奖金，所以KPI就成了考核指标的代名词，但是你考核什么，员工就会给你什么，与考核无关的，能不做就不做。当年初谈考核指标的时候，斗智斗勇，摆困难，讲挑战，就是希望把KPI谈得的一点点OK，他不考核，为什么呢？因为目标是目标，奖金是奖金，一旦奖金为管理目标，员工和公司就关于目标的大小进行。那公司还是要考核，还是要发奖金的，那怎么办呢？用360度的评估，你的老板，你的下属，甚至别的部门的同事一起给你打分，你只管瞄准目标，别怕，你的努力和成就，周围的同事都看在眼里。</p><p>最后的总结：KPI 只能让驴使劲走，而 OKR 用于保证驴头朝正确的方向。</p>]]></content>
    
    
    <categories>
      
      <category>企业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎么去做职业规划</title>
    <link href="/2022/05/07/%E6%80%8E%E4%B9%88%E5%8E%BB%E5%81%9A%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
    <url>/2022/05/07/%E6%80%8E%E4%B9%88%E5%8E%BB%E5%81%9A%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<p>经常有同学问我，我怎么做职业规划呢？我说这就要看一个人对自己的自信程度和格局大小。什么叫自信程度？就是你觉得你是不是能干大事儿，如果你想了半天，觉得我好像这辈子跟着谁混，能吃口饭就挺好的，我也没有什么大期待，那你的职业规划的时间单位就相对小一点，看着也比较短一些些，能抓住什么就抓住什么。但如果你对自己的能力和未来的成就自信足够大，就一盘大棋，以更长的时间轴来思考职业规划的问题。所以你的自信程度和格局大小决定了职业规划的大逻辑，</p><p>听上去有点抽象。我举个例子，如果今天有一个人已经60岁退休，他回顾自己的历史，知道自己在50岁的时候创立了一家年收入30公司，那么他如果提前知道这件事，再回到18岁他会干什么？他可能会想，我在五周岁的时候要成立一个30亿的公司，那我其实。可以乘110呢，那我当时最缺的是什么呢？我当时最缺的可能是理工科的基础，很多事情我不扎实呢。所以他这个时候可能会干什么？他可能会在大学的四年就好好的学习理工科，虽然理工科也许不能挣钱，但他心中不怕，因为他知道自己在50岁的时候就能年赚30，于是他接下来的每一步都是为了积累50岁时所需要的能力，虽然可能并不赚钱。所以你看他为什么有那么大的定力，因为她的自信，她在50岁时能赚30亿，这种自信来自于什么？来自于她看到了历史。那么当你站在18岁的节点，如果让你自己来导演这一世，你觉得自己能在50岁、40岁、30岁的时候能做些什么，你的格局越大，你就会越做长期主义的规划。</p><p>以前但凡有人来问我，说我儿子报什么专业好，我就会推荐他学数学，因为数学的基础能力太重要了，但是后来我开始有点转变了，有人来问我的话，我会根据他的情况来。回答，因为每个家长的心态都是不一样的，比如，如果家长的心态让儿子找一个好的工作来养活自己，我就推荐他学计算机，因为计算机好找工作。但是越富有的家长呢，他就越想让孩子去学艺术，学历史，去把时间花在自己热爱的身上，因为她的孩子已经可以一辈子衣食无忧。所以你对未来的信心有多大，就决定了你有多大的格局来规划自己的职业发展。</p>]]></content>
    
    
    <categories>
      
      <category>企业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人生书单</title>
    <link href="/2022/05/07/%E4%BA%BA%E7%94%9F%E4%B9%A6%E5%8D%95/"/>
    <url>/2022/05/07/%E4%BA%BA%E7%94%9F%E4%B9%A6%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>排名</th><th>书名</th><th>作者</th><th>评分</th></tr></thead><tbody><tr><td>1</td><td>量子力学</td><td>P.A.M.Dirac</td><td>9.8</td></tr><tr><td>2</td><td>道德经</td><td>老子／华夏版</td><td>9.6</td></tr><tr><td>3</td><td>国富论</td><td>亚当·斯密／樊冰</td><td>9</td></tr><tr><td>4</td><td>易经</td><td>伏羲文王孔子／傳佩荣</td><td>9.7</td></tr><tr><td>5</td><td>社会心理学</td><td>戴维·迈尔斯</td><td>9</td></tr><tr><td>6</td><td>第五项修炼</td><td>彼得·圣吉／张成林</td><td>8.6</td></tr><tr><td>7</td><td>西方哲学史</td><td>撒穆尔·伊诺克·斯通普夫</td><td>9.4</td></tr><tr><td>8</td><td>宏观经济学</td><td>卡尔·E·凯斯</td><td>绝版</td></tr><tr><td>9</td><td>史蒂夫·乔布斯传</td><td>沃尔特·艾萨克森</td><td>8.9</td></tr><tr><td>10</td><td>第二性</td><td>西蒙娜·德·波伏瓦</td><td>9.4</td></tr><tr><td>11</td><td>射雕英雄传</td><td>金庸</td><td>9.1</td></tr><tr><td>12</td><td>价值评估</td><td>蒂姆·科勒</td><td>9.1</td></tr><tr><td>13</td><td>人类的故事</td><td>亨德里克·威廉·房龙</td><td>9.1</td></tr><tr><td>14</td><td>设计模式</td><td>Erich Gamma等</td><td>9.1</td></tr><tr><td>15</td><td>次第花开</td><td>希阿荣博堪布</td><td>9.1</td></tr><tr><td>16</td><td>素书</td><td>黄石公</td><td>8.9</td></tr><tr><td>17</td><td>算法导论</td><td>Thomas H.Cormen等</td><td>9.5</td></tr><tr><td>18</td><td>水浒传</td><td>施耐庵／罗贯中／（人性）</td><td>9.2</td></tr><tr><td>19</td><td>黑天鹅</td><td>塔勒布</td><td>8.1</td></tr><tr><td>20</td><td>系统之美</td><td>德内拉·梅多斯／邱昭良</td><td>8.2</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>书单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“我们”</title>
    <link href="/2022/05/06/%E2%80%9C%E6%88%91%E4%BB%AC%E2%80%9D/"/>
    <url>/2022/05/06/%E2%80%9C%E6%88%91%E4%BB%AC%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<h4 id="阿Q总是企图跟赵四老爷称“我们”，但赵四老爷只有在跟人打架的时候，才跟阿Q称“我们”，其他时候都是耳光伺候。"><a href="#阿Q总是企图跟赵四老爷称“我们”，但赵四老爷只有在跟人打架的时候，才跟阿Q称“我们”，其他时候都是耳光伺候。" class="headerlink" title="阿Q总是企图跟赵四老爷称“我们”，但赵四老爷只有在跟人打架的时候，才跟阿Q称“我们”，其他时候都是耳光伺候。"></a>阿Q总是企图跟赵四老爷称“我们”，但赵四老爷只有在跟人打架的时候，才跟阿Q称“我们”，其他时候都是耳光伺候。</h4>]]></content>
    
    
    <categories>
      
      <category>故事会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>特斯拉</title>
    <link href="/2022/05/06/%E7%89%B9%E6%96%AF%E6%8B%89/"/>
    <url>/2022/05/06/%E7%89%B9%E6%96%AF%E6%8B%89/</url>
    
    <content type="html"><![CDATA[<h4 id="八戒：师傅，我有一事不解。"><a href="#八戒：师傅，我有一事不解。" class="headerlink" title="八戒：师傅，我有一事不解。"></a>八戒：师傅，我有一事不解。</h4><h4 id="唐僧：说！"><a href="#唐僧：说！" class="headerlink" title="唐僧：说！"></a>唐僧：说！</h4><h4 id="八戒：为什么有的连手机都造不好，却嚷嚷着要造车？为什么有的连火箭都能回收，刹车却失灵了呢？"><a href="#八戒：为什么有的连手机都造不好，却嚷嚷着要造车？为什么有的连火箭都能回收，刹车却失灵了呢？" class="headerlink" title="八戒：为什么有的连手机都造不好，却嚷嚷着要造车？为什么有的连火箭都能回收，刹车却失灵了呢？"></a>八戒：为什么有的连手机都造不好，却嚷嚷着要造车？为什么有的连火箭都能回收，刹车却失灵了呢？</h4><h4 id="唐僧：徒儿啊，这事你若都搞懂了，你就不是猪了。"><a href="#唐僧：徒儿啊，这事你若都搞懂了，你就不是猪了。" class="headerlink" title="唐僧：徒儿啊，这事你若都搞懂了，你就不是猪了。"></a>唐僧：徒儿啊，这事你若都搞懂了，你就不是猪了。</h4>]]></content>
    
    
    <categories>
      
      <category>故事会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笨鸟先飞</title>
    <link href="/2022/05/06/%E7%AC%A8%E9%B8%9F%E5%85%88%E9%A3%9E/"/>
    <url>/2022/05/06/%E7%AC%A8%E9%B8%9F%E5%85%88%E9%A3%9E/</url>
    
    <content type="html"><![CDATA[<h4 id="时间长了，我懂了"><a href="#时间长了，我懂了" class="headerlink" title="时间长了，我懂了"></a>时间长了，我懂了</h4><h4 id="笨鸟如果后飞-就不叫笨鸟了"><a href="#笨鸟如果后飞-就不叫笨鸟了" class="headerlink" title="笨鸟如果后飞 就不叫笨鸟了"></a>笨鸟如果后飞 就不叫笨鸟了</h4>]]></content>
    
    
    <categories>
      
      <category>故事会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文官还怕没人做吗</title>
    <link href="/2022/05/06/%E6%96%87%E5%AE%98%E8%BF%98%E6%80%95%E6%B2%A1%E4%BA%BA%E5%81%9A%E5%90%97/"/>
    <url>/2022/05/06/%E6%96%87%E5%AE%98%E8%BF%98%E6%80%95%E6%B2%A1%E4%BA%BA%E5%81%9A%E5%90%97/</url>
    
    <content type="html"><![CDATA[<h4 id="张献忠入川后，对明朝的降官实施了无情的诛杀。其中一次，杀降官三百人。有亲信劝他，他说：文官还怕没有人做么？"><a href="#张献忠入川后，对明朝的降官实施了无情的诛杀。其中一次，杀降官三百人。有亲信劝他，他说：文官还怕没有人做么？" class="headerlink" title="张献忠入川后，对明朝的降官实施了无情的诛杀。其中一次，杀降官三百人。有亲信劝他，他说：文官还怕没有人做么？"></a>张献忠入川后，对明朝的降官实施了无情的诛杀。其中一次，杀降官三百人。有亲信劝他，他说：文官还怕没有人做么？</h4>]]></content>
    
    
    <categories>
      
      <category>故事会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春江水暖鸭先知</title>
    <link href="/2022/05/06/%E6%98%A5%E6%B1%9F%E6%B0%B4%E6%9A%96%E9%B8%AD%E5%85%88%E7%9F%A5/"/>
    <url>/2022/05/06/%E6%98%A5%E6%B1%9F%E6%B0%B4%E6%9A%96%E9%B8%AD%E5%85%88%E7%9F%A5/</url>
    
    <content type="html"><![CDATA[<h4 id="几位富豪和家成一起比赛，大家都觉得家成老了腿脚不好，结果他跑了第一。"><a href="#几位富豪和家成一起比赛，大家都觉得家成老了腿脚不好，结果他跑了第一。" class="headerlink" title="几位富豪和家成一起比赛，大家都觉得家成老了腿脚不好，结果他跑了第一。"></a>几位富豪和家成一起比赛，大家都觉得家成老了腿脚不好，结果他跑了第一。</h4><h4 id="大家很奇怪。李大笑：谁让你们听见枪声才跑"><a href="#大家很奇怪。李大笑：谁让你们听见枪声才跑" class="headerlink" title="大家很奇怪。李大笑：谁让你们听见枪声才跑"></a>大家很奇怪。李大笑：谁让你们听见枪声才跑</h4><h4 id="有人先知先觉"><a href="#有人先知先觉" class="headerlink" title="有人先知先觉"></a>有人先知先觉</h4><h4 id="有人后知后觉"><a href="#有人后知后觉" class="headerlink" title="有人后知后觉"></a>有人后知后觉</h4><h4 id="有人不知不觉"><a href="#有人不知不觉" class="headerlink" title="有人不知不觉"></a>有人不知不觉</h4>]]></content>
    
    
    <categories>
      
      <category>故事会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>名医扁鹊</title>
    <link href="/2022/05/06/%E5%90%8D%E5%8C%BB%E6%89%81%E9%B9%8A/"/>
    <url>/2022/05/06/%E5%90%8D%E5%8C%BB%E6%89%81%E9%B9%8A/</url>
    
    <content type="html"><![CDATA[<h4 id="魏文王问名医扁鹊说：“你们家兄弟三人，都精于医术，到底哪一位最好呢-”"><a href="#魏文王问名医扁鹊说：“你们家兄弟三人，都精于医术，到底哪一位最好呢-”" class="headerlink" title="魏文王问名医扁鹊说：“你们家兄弟三人，都精于医术，到底哪一位最好呢?”"></a>魏文王问名医扁鹊说：“你们家兄弟三人，都精于医术，到底哪一位最好呢?”</h4><h4 id="扁鹊答说：“长兄最好，中兄次之，我最差。”"><a href="#扁鹊答说：“长兄最好，中兄次之，我最差。”" class="headerlink" title="扁鹊答说：“长兄最好，中兄次之，我最差。”"></a>扁鹊答说：“长兄最好，中兄次之，我最差。”</h4><h4 id="文王再问：“那么为什么你最出名呢-”"><a href="#文王再问：“那么为什么你最出名呢-”" class="headerlink" title="文王再问：“那么为什么你最出名呢?”"></a>文王再问：“那么为什么你最出名呢?”</h4><h4 id="扁鹊答说：“我长兄治病，是治病于病情发作之前。由于一般人不知道他事先能铲除病因，所以他的名气无法传出去，只有我们家的人才知道。我中兄治病，是治病于病情初起之时。一般人以为他只能治轻微的小病，所以他的名气只及于本乡里。而我扁鹊治病，是治病于病情严重之时。一般人都看到我在经脉上穿针管来放血、在皮肤上敷药等大手术，所以以为我的医术高明，名气因此响遍全国。”"><a href="#扁鹊答说：“我长兄治病，是治病于病情发作之前。由于一般人不知道他事先能铲除病因，所以他的名气无法传出去，只有我们家的人才知道。我中兄治病，是治病于病情初起之时。一般人以为他只能治轻微的小病，所以他的名气只及于本乡里。而我扁鹊治病，是治病于病情严重之时。一般人都看到我在经脉上穿针管来放血、在皮肤上敷药等大手术，所以以为我的医术高明，名气因此响遍全国。”" class="headerlink" title="扁鹊答说：“我长兄治病，是治病于病情发作之前。由于一般人不知道他事先能铲除病因，所以他的名气无法传出去，只有我们家的人才知道。我中兄治病，是治病于病情初起之时。一般人以为他只能治轻微的小病，所以他的名气只及于本乡里。而我扁鹊治病，是治病于病情严重之时。一般人都看到我在经脉上穿针管来放血、在皮肤上敷药等大手术，所以以为我的医术高明，名气因此响遍全国。”"></a>扁鹊答说：“我长兄治病，是治病于病情发作之前。由于一般人不知道他事先能铲除病因，所以他的名气无法传出去，只有我们家的人才知道。我中兄治病，是治病于病情初起之时。一般人以为他只能治轻微的小病，所以他的名气只及于本乡里。而我扁鹊治病，是治病于病情严重之时。一般人都看到我在经脉上穿针管来放血、在皮肤上敷药等大手术，所以以为我的医术高明，名气因此响遍全国。”</h4>]]></content>
    
    
    <categories>
      
      <category>故事会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>唐僧的自我介绍</title>
    <link href="/2022/05/06/%E5%94%90%E5%83%A7%E7%9A%84%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/05/06/%E5%94%90%E5%83%A7%E7%9A%84%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h4 id="唐僧每次介绍自己：贫僧唐三藏，从东土大唐而来，去往西天拜佛取经。-这几句话包涵了三个问题：我是谁？我从哪里来？我要到哪里去？清楚自己是谁，从哪里来，要到哪里去，要做什么，在做什么。"><a href="#唐僧每次介绍自己：贫僧唐三藏，从东土大唐而来，去往西天拜佛取经。-这几句话包涵了三个问题：我是谁？我从哪里来？我要到哪里去？清楚自己是谁，从哪里来，要到哪里去，要做什么，在做什么。" class="headerlink" title="唐僧每次介绍自己：贫僧唐三藏，从东土大唐而来，去往西天拜佛取经。 这几句话包涵了三个问题：我是谁？我从哪里来？我要到哪里去？清楚自己是谁，从哪里来，要到哪里去，要做什么，在做什么。"></a>唐僧每次介绍自己：贫僧唐三藏，从东土大唐而来，去往西天拜佛取经。 这几句话包涵了三个问题：我是谁？我从哪里来？我要到哪里去？清楚自己是谁，从哪里来，要到哪里去，要做什么，在做什么。</h4>]]></content>
    
    
    <categories>
      
      <category>故事会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花果山爆炸后</title>
    <link href="/2022/05/06/%E8%8A%B1%E6%9E%9C%E5%B1%B1%E7%88%86%E7%82%B8%E5%90%8E/"/>
    <url>/2022/05/06/%E8%8A%B1%E6%9E%9C%E5%B1%B1%E7%88%86%E7%82%B8%E5%90%8E/</url>
    
    <content type="html"><![CDATA[<h4 id="花果山爆炸后"><a href="#花果山爆炸后" class="headerlink" title="花果山爆炸后"></a>花果山爆炸后</h4><h4 id="唐僧问悟空：死了多少只猴子？"><a href="#唐僧问悟空：死了多少只猴子？" class="headerlink" title="唐僧问悟空：死了多少只猴子？"></a>唐僧问悟空：死了多少只猴子？</h4><h4 id="悟空：26个洞坍塌。"><a href="#悟空：26个洞坍塌。" class="headerlink" title="悟空：26个洞坍塌。"></a>悟空：26个洞坍塌。</h4><h4 id="唐僧：死了多少？"><a href="#唐僧：死了多少？" class="headerlink" title="唐僧：死了多少？"></a>唐僧：死了多少？</h4><h4 id="悟空：只有5000颗桃树被毁。"><a href="#悟空：只有5000颗桃树被毁。" class="headerlink" title="悟空：只有5000颗桃树被毁。"></a>悟空：只有5000颗桃树被毁。</h4><h4 id="唐僧：我问的是到底死了多少猴子？"><a href="#唐僧：我问的是到底死了多少猴子？" class="headerlink" title="唐僧：我问的是到底死了多少猴子？"></a>唐僧：我问的是到底死了多少猴子？</h4><h4 id="悟空：已将活的猴子安全转移了。"><a href="#悟空：已将活的猴子安全转移了。" class="headerlink" title="悟空：已将活的猴子安全转移了。"></a>悟空：已将活的猴子安全转移了。</h4><h4 id="唐僧急了：到底死了多少猴？"><a href="#唐僧急了：到底死了多少猴？" class="headerlink" title="唐僧急了：到底死了多少猴？"></a>唐僧急了：到底死了多少猴？</h4><h4 id="悟空：今天又救活了一只猴子-…"><a href="#悟空：今天又救活了一只猴子-…" class="headerlink" title="悟空：今天又救活了一只猴子..…"></a>悟空：今天又救活了一只猴子..…</h4><h4 id="唐僧：我问你究竟Tm死了多少猴？"><a href="#唐僧：我问你究竟Tm死了多少猴？" class="headerlink" title="唐僧：我问你究竟Tm死了多少猴？"></a>唐僧：我问你究竟Tm死了多少猴？</h4><h4 id="悟空：在山上放火的是特么观音大师的外甥！"><a href="#悟空：在山上放火的是特么观音大师的外甥！" class="headerlink" title="悟空：在山上放火的是特么观音大师的外甥！"></a>悟空：在山上放火的是特么观音大师的外甥！</h4><h4 id="唐僧：阿弥陀佛，今天又救活了几只猴子来着？"><a href="#唐僧：阿弥陀佛，今天又救活了几只猴子来着？" class="headerlink" title="唐僧：阿弥陀佛，今天又救活了几只猴子来着？"></a>唐僧：阿弥陀佛，今天又救活了几只猴子来着？</h4>]]></content>
    
    
    <categories>
      
      <category>故事会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>皇帝的金锄头</title>
    <link href="/2022/05/06/%E7%9A%87%E5%B8%9D%E7%9A%84%E9%87%91%E9%94%84%E5%A4%B4/"/>
    <url>/2022/05/06/%E7%9A%87%E5%B8%9D%E7%9A%84%E9%87%91%E9%94%84%E5%A4%B4/</url>
    
    <content type="html"><![CDATA[<h4 id="古代有两个老农民畅想皇帝的奢华生活"><a href="#古代有两个老农民畅想皇帝的奢华生活" class="headerlink" title="古代有两个老农民畅想皇帝的奢华生活"></a>古代有两个老农民畅想皇帝的奢华生活</h4><h4 id="一个说：“我想皇帝肯定天天吃白面膜吃到饱！”"><a href="#一个说：“我想皇帝肯定天天吃白面膜吃到饱！”" class="headerlink" title="一个说：“我想皇帝肯定天天吃白面膜吃到饱！”"></a>一个说：“我想皇帝肯定天天吃白面膜吃到饱！”</h4><h4 id="另一个说：“不止不止，我想皇帝肯定下地都用的金锄头！”"><a href="#另一个说：“不止不止，我想皇帝肯定下地都用的金锄头！”" class="headerlink" title="另一个说：“不止不止，我想皇帝肯定下地都用的金锄头！”"></a>另一个说：“不止不止，我想皇帝肯定下地都用的金锄头！”</h4>]]></content>
    
    
    <categories>
      
      <category>故事会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树立愿景</title>
    <link href="/2022/05/06/%E6%A0%91%E7%AB%8B%E6%84%BF%E6%99%AF/"/>
    <url>/2022/05/06/%E6%A0%91%E7%AB%8B%E6%84%BF%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<p>比产品目标更重要的是产品愿景，看上去产品愿景是个很虚的事情，但是有的时候一个愿景比产品的具体目标更重要。</p><p>产品目标可能只是一些数字，完成多少用户，赚多少钱，但是每个项目都可以提出类似的目标，而产品的愿景是区别项目的一个重要标志，可能功能差不多的竞品，商业模式也差不多，甚至界面都长的差不多，但是他们可能背后的愿景是不同的。愿景就是产品的一团火，这团火不灭，产品就会一直燃烧，直到火越少越大。</p><p>产品很容易设定一个目标，但是产品很难有一个愿景，恰恰是这个很虚的东西很难去定义他，因为人去追逐表面眼前的东西很容易，名利而已，产品愿景却是看到一个未来，这个趋势预判和赶上趋势的魄力是很难的。</p><p><strong>愿景怎么产生的：</strong></p><p>目标好定，但是愿景难有，一个好的愿景不但需要产品人员或者创始人有很高的格局，且往往和自己的经历有很大关系。百度的愿景是李彦宏在中学读书时候萌芽的，那时候他的学校很多书没有，而在北京等大城市却很容易获得，也就是他们苦苦追求的上限是别人的下限，所以信息平等的获取就在他心里埋下了种子。</p><p>愿景是一颗种子，如果没有一些事情触发，很难对一个事情有很深的看法，所以目标是你自己标一个旗子，然后走过去。而愿景是无论你在哪里，哪怕你已经老了躺在病床上，旗子还在哪里，愿景是让人念念不忘的东西。如果一个人生命还有3年，那么找一个事情要达成，甚至下辈子再来还要去做的就是愿景。目标常有，而愿景不常有。</p><p>当你没有愿景的时候，产品目标是比较清晰的，而当你有愿景的时候，愿景是无比清晰的，而产品目标是模糊的，这点如果能体会到细微的不同，说明才有可能给产品注入愿景。</p><p>愿景有多强大，在于产品人员的心是否被强烈牵引，很多人兜兜转转，走了很多弯路后，或者产品失败无数次后那个愿景却可能在灰暗的现实作为一个火种燃烧的越来越强烈，好的愿景是值得产品人员用自己的青春和生命去燃烧的，这个和表面的努力是不同的。</p><p>一个人往往有基本的责任感，对家人负责，对情侣负责，对工作职责负责，对领导负责，对公司负责，不过产品愿景往往都不是对这些负责，而是对某种重大改变负责，责任感之上的是使命感，有责任感的可以完成一个产品目标，但只有使命感的人才能去完成一个产品愿景。人可以在确定中追求一个目标，但很难坚持在不确定中追求一个不确定的结果，这个决定了最后的差距。</p>]]></content>
    
    
    <categories>
      
      <category>企业</category>
      
      <category>感悟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>起名的重要性</title>
    <link href="/2022/05/06/%E8%B5%B7%E5%90%8D%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/"/>
    <url>/2022/05/06/%E8%B5%B7%E5%90%8D%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="三点：忌大-忌全-忌满"><a href="#三点：忌大-忌全-忌满" class="headerlink" title="三点：忌大 忌全 忌满"></a>三点：忌大 忌全 忌满</h2><p>万事无恒，佛法讲：人生无常。人世间所有的事物都是以波浪形发展的。</p><h5 id="老子讲：天下之至柔-驰骋天下之至坚。"><a href="#老子讲：天下之至柔-驰骋天下之至坚。" class="headerlink" title="老子讲：天下之至柔 驰骋天下之至坚。"></a>老子讲：天下之至柔 驰骋天下之至坚。</h5><h5 id="上善若水，水善利万物而不争。处众人之所恶，故几于道。"><a href="#上善若水，水善利万物而不争。处众人之所恶，故几于道。" class="headerlink" title="上善若水，水善利万物而不争。处众人之所恶，故几于道。"></a>上善若水，水善利万物而不争。处众人之所恶，故几于道。</h5><p>一定要讲究以柔克钢 以软胜强 。</p><p>井水因为甘甜所以很快枯竭，李子因 为苦涩所以得以长存。指一切事物都是利弊相连。这句话出自明•刘基《苦斋记》： “赵子曰：‘良药苦口利于病，忠言逆耳 利于行。彼之苦，吾之乐；而彼之乐，吾之苦也。吾闻井以甘竭，李以苦存。夫差以酣酒亡，而勾践以尝胆兴，无亦犹是也。’</p><p>所以我们起名字很重要 名字是个符号 本身就是符 带有能量</p><p>汉字就是符号 符号就是能量 </p><p>龚自珍在《己亥杂诗》（62）中也写道：“古人制字鬼夜泣，后人识字百忧集。</p><p>说的是仓颉造字之时，鬼神都很害怕。我们看恒大，想要恒久而大，这是不符合道的，你越想长久，</p><p>老天越让短，越想大，老天越让你小。</p><p>微软、小米、微信这几个名字是蕴涵了很多设计心思的。</p>]]></content>
    
    
    <categories>
      
      <category>易经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>站在不同纬度去看待问题</title>
    <link href="/2022/05/06/%E7%AB%99%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%BA%AC%E5%BA%A6%E5%8E%BB%E7%9C%8B%E5%BE%85%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/06/%E7%AB%99%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%BA%AC%E5%BA%A6%E5%8E%BB%E7%9C%8B%E5%BE%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="格局思考的五个维度"><a href="#格局思考的五个维度" class="headerlink" title="格局思考的五个维度"></a>格局思考的五个维度</h3><h4 id="自己的空间维度-（此在）"><a href="#自己的空间维度-（此在）" class="headerlink" title="自己的空间维度 （此在）"></a>自己的空间维度 （此在）</h4><p>站在我们这片土地上的维度</p><h4 id="时间维度（彼时）-："><a href="#时间维度（彼时）-：" class="headerlink" title="时间维度（彼时） ："></a>时间维度（彼时） ：</h4><p>10年前  我们房子都在涨，而且房子出租收益还不少，很多人当房东 就很舒服，可以躺平，这就是基于现状进行思考，但问题是，如果你把这个尺度拉大，拉大60年，拉大100年，那就不一样了，如果现在是49年，你家现在有十套房子对你好，还是没有房子对你好。所以你站在一个点上，把时间拉长，很多问题会顿时明白</p><h4 id="空间维度-（彼在）："><a href="#空间维度-（彼在）：" class="headerlink" title="空间维度 （彼在）："></a>空间维度 （彼在）：</h4><p>葛优演的《活着》是作家余华写的，余华曾经说过一段话，他家是地主，有200多亩地，但是解放前时，他爷爷是吃喝嫖赌、无恶不作，将地给糟蹋完了，然后他家是贫农，所以余华很感谢他的爷爷是个流氓。结果我爷爷就毁了，他一点都不流氓，我爷爷就娶了一个老婆，以他那个条件可以多娶好几个，结果他勤俭持家、勤勤恳恳、极其本分，所以我十分痛恨我爷爷，爷爷你为什么不当个流氓，你要当个流氓我十分感谢你，结果你让我十分痛恨你，结果是余华是十分感谢他的爷爷。所以你站在同一个地点思考，把时间维度拉开，很多问题都会顿时明白，再把中华五千年每个朝代的兴衰史看透，你看待很多问题就更不一样了</p><p>所谓的聪明人永远看眼前的机会，但有智慧的人，永远看背后的周期</p><h4 id="从别人的位置看（换位思考）"><a href="#从别人的位置看（换位思考）" class="headerlink" title="从别人的位置看（换位思考）"></a>从别人的位置看（换位思考）</h4><p>再加一个纬度 别站在这个地，换个地。站在欧洲思考，看看欧洲历史，看看北美历史，再对比我们这几千年历史看，完全不一样。越南、韩国怎么写历史，他们写历史就一个逻辑 我们这几千年倒了霉了，身边有个庞大的邻居，他一不开心就狂揍我们，我们一直被蹂躏，所以看了人家的历史，马上很多事你都会明白。</p><p>这就是自己的空间 再加上 时间空间 再站在别人的位置上去看</p><h4 id="站在外边看里面（上帝视角）"><a href="#站在外边看里面（上帝视角）" class="headerlink" title="站在外边看里面（上帝视角）"></a>站在外边看里面（上帝视角）</h4><p>但是你会发现我们不一样，我们只是在在这个地方往外看，我们从来没有站在外边往里看，你有没有发现我们几千年，所有历史的维度只站在一个纬度，站在如何维护皇权统治的基础上写的历史，只要是让帝王不开心的事，历史一定不写，只要让帝王恼火的事，那你就是个坏人，只要是维护皇权统治的，那么都是好人。历史应该是写实。我们的历史首先是立场，我们能不能从另外一个角度看问题，不是站在帝王的角度看问题，站在老百姓的立场上看问题，我们都平等，扒了衣服都一样，没什么区别，我认为这个逻辑才合理，所以我一直特别推崇北宋，特别是仁宗皇帝那个朝代，那个朝代能做到与民同乐，这就是我想说的，我们思考问题至少需要五个纬度，如果你看问题的维度都不够，很多问题都是看不透的。</p>]]></content>
    
    
    <categories>
      
      <category>感悟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>降本增效</title>
    <link href="/2022/05/06/%E9%99%8D%E6%9C%AC%E5%A2%9E%E6%95%88/"/>
    <url>/2022/05/06/%E9%99%8D%E6%9C%AC%E5%A2%9E%E6%95%88/</url>
    
    <content type="html"><![CDATA[<p>降本增效</p><h3 id="降什么本-增什么效？"><a href="#降什么本-增什么效？" class="headerlink" title="降什么本 增什么效？"></a>降什么本 增什么效？</h3><p>很多时候，我们一不小心就活成了自己讨厌的样子。</p><p>前些天，看到一篇文章，讲的是人生有四大忌：眼高手低、趋炎附势、得意忘形、好为人师。当看到“好为人师”四个字时，不由的心中一震，仿佛看到了镜子里那个最丑陋的自己，回想起过往种种劣行，很多时候都在这上面栽了跟头，然而自己从没意识到问题的根本，还经常摆出一副老者说教的姿态，本以为是在好心帮助他人解决问题，实际上更多的是在将自己的观点强加于人，惹他人不快。</p><p>我们习惯性的把沟通能力和乐于表达划了等号，认为思维严谨、能言善辩、耐心指导、以理服人是我们每个产品人必修技能。提升自身技能并没有错，然而事实往往是：我们把思维严谨变成了钻牛角尖，把能言善辩变成了信口雌黄，把耐心指导变成了指指点点，把以理服人变成了强加于人，如此这般的下场自然可想而知。然而更为严重的是，我们根本没有意识到这是一个问题，误把陈醋当成墨，直到写尽半生酸，头撞南墙满身伤痕了还茫然不知。</p><p>各行各业都有自己的行话，比如产品经理口中的“需求”、“排期”，开发口中的“架构”、“联调”，测试口中的“用例”、“bug”。在供应链领域里，如果能说出“降本增效”这一词，说明此人至少不是外行。但供应链里到底存在哪些成本和效率，恐怕90%以上的人没有更深入的思考过。本篇文章中，和大家一起聊聊降本增效的那些事，并总结整理了软件开发中如何做到降本增效的过程，分享给大家。</p><h3 id="减少在偶然复杂度上的消耗-聚焦本质复杂度："><a href="#减少在偶然复杂度上的消耗-聚焦本质复杂度：" class="headerlink" title="减少在偶然复杂度上的消耗  聚焦本质复杂度："></a><strong>减少在偶然复杂度上的消耗  聚焦本质复杂度</strong>：</h3><p><strong>减少在偶然复杂度上的消耗：提供</strong>一个思考框架</p><p><img src="https://kxlp7681np.feishu.cn/space/api/box/stream/download/asynccode/?code=MWQ4MGJiZWFjMmJlYmViMDg0MDgxNDJkNzA0N2Y4N2JfNTM1UHdnMzVRZzNZMDBtM1U0QjNSUjZpMG5FOW5ONDZfVG9rZW46Ym94Y24xbXJFQThmWm12eTRJUUJjb3phbWZiXzE2NTE4MjUzMzE6MTY1MTgyODkzMV9WNA" alt="img"></p><p>唐僧每次介绍自己：贫僧唐三藏，从东土大唐而来，去往西天拜佛取经。 这几句话包涵了每人都应该弄明白的三个问题：我是谁？我从哪里来？我要到哪里去？清楚自己是谁，从哪里来，要到哪里去，要做什么，在做什么。</p><p><strong>以终为始，确定好真实目标</strong>：</p><p>就是在工作的一开始就确定好自己的目标。我们需要看到的是真正的目标，而不是把别人交代给我们的工作当作目标。你可以看出这个原则是在帮助我们回答思考框架中，Where are we going?（我们要到哪儿去？）这个问题。</p><p><strong>任务分解，找到实施路径</strong>：</p><p>是将大目标拆分成一个一个可行的执行任务，工作分解得越细致，我们便越能更好地掌控工作，它是帮助我们回答思维框架中，How can we get there?（我们如何到达那里？）的问题。</p><p>如果说前两个原则是要在动手之前做的分析，那后面两个原则就是在通往目标的道路上，为我们保驾护航，因为在实际工作中，我们少不了与人和机器打交道。</p><p>沟通反馈，解决与人打交道出现的问题：</p><p>沟通反馈是为了疏通与其他人交互的渠道。一方面，我们保证信息能够传达出去，减少因为理解偏差造成的工作疏漏；另一方面，也要保证我们能够准确接收外部信息，以免因为自我感觉良好，阻碍了进步。</p><p>自动化，解决与机器打交道出现的问题：</p><p>就是将繁琐的工作通过自动化的方式交给机器执行，这是我们程序员本职工作的一部分，我们擅长的是为其他人打造自动化的服务，但自己的工作却应用得不够，这也是我们工作中最值得优化的部分。</p><p><img src="https://kxlp7681np.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjcxZjE2MWI3MzZlY2U2MjRjYWUxNmJkZDQwZDA1MmNfOVd1SzlqdGdQV3Q2eWlObmtoclNmRlk4OU9wd1AwMFRfVG9rZW46Ym94Y24wS2JmU3QwbHc5cmhBeTJYNWQyRWNmXzE2NTE4MjUzMzE6MTY1MTgyODkzMV9WNA" alt="img"></p><h3 id="低代码平台"><a href="#低代码平台" class="headerlink" title="低代码平台"></a>低代码平台</h3><p><img src="https://kxlp7681np.feishu.cn/space/api/box/stream/download/asynccode/?code=NTg0OTFlZTg4NzFlOWY4MmIxYmRlNWJhMjk1ZThhODFfV2ZwR2RqTjZFUmJXZzA4bXJHbmpqaVhiZXpGNTl1RkFfVG9rZW46Ym94Y242Wk9VN3IwaHVhS0ZIUFRJbDFzeEJlXzE2NTE4MjUzMzE6MTY1MTgyODkzMV9WNA" alt="img"></p><p><img src="https://kxlp7681np.feishu.cn/space/api/box/stream/download/asynccode/?code=Y2I2MzNiYTg4ZTQ4ZWJkYzk3MTdjNWI3YzhjNDRlOGFfam15clc3d1FDTUJUMHdmdXB2Y2t2RjBONUxWck5PWHFfVG9rZW46Ym94Y25OTkk5WFBQNW04SjFMU0NQcGVrMUJnXzE2NTE4MjUzMzE6MTY1MTgyODkzMV9WNA" alt="img"></p><p>哪些场景可以使用到低代码平台？</p><p><img src="https://kxlp7681np.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGNlNzYzODMxN2NjNGM4YjA2NTYwMzZhZTVhOWFkOWZfUmNVVlBsV2VYMk5qY0xzS3NnVGdhUExDa0hTTUo5TFBfVG9rZW46Ym94Y24zQzl4cGhFaTlVZk1oaVc3U1ZVQ25mXzE2NTE4MjUzMzE6MTY1MTgyODkzMV9WNA" alt="img"></p><p>低代码平台无疑是解决一些微小问题的好方法，节省成本 提高效率。</p><h3 id="统一中间件、脚手架"><a href="#统一中间件、脚手架" class="headerlink" title="统一中间件、脚手架"></a>统一中间件、脚手架</h3><p>项目组A 使用一套环境 项目组B使用另一套环境，某个中间件出现问题时，各组都需要去检查漏洞是否存在问题，找到问题后，又各自去解决该问题，有的是换组件、有的是升级包等等，如此往复，脚手架产生变异，无法集中处理问题及升级，所以统一脚手架、统一中间件极其有必要。</p><h3 id="统一规范"><a href="#统一规范" class="headerlink" title="统一规范"></a>统一规范</h3><p>规范因需求而产生。</p><p>代码编写规范：各语言规范、GIt规范、代码评审规范、应用日志规范、建表规范</p><p>开发工具规范</p><p>数据库版本管理规范</p><p>文档编写规范等：产品文档、接口设计规范、概要设计规范、数据库设计规范</p><h3 id="统一发版"><a href="#统一发版" class="headerlink" title="统一发版"></a>统一发版</h3>]]></content>
    
    
    <categories>
      
      <category>企业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关键在于“我可以给你带来什么”</title>
    <link href="/2022/05/06/%E5%85%B3%E9%94%AE%E5%9C%A8%E4%BA%8E%E2%80%9C%E6%88%91%E5%8F%AF%E4%BB%A5%E7%BB%99%E4%BD%A0%E5%B8%A6%E6%9D%A5%E4%BB%80%E4%B9%88%E2%80%9D/"/>
    <url>/2022/05/06/%E5%85%B3%E9%94%AE%E5%9C%A8%E4%BA%8E%E2%80%9C%E6%88%91%E5%8F%AF%E4%BB%A5%E7%BB%99%E4%BD%A0%E5%B8%A6%E6%9D%A5%E4%BB%80%E4%B9%88%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<p>今天一开始，跟大家分享一个你可能没听过的新名词——“现实扭曲力场”。<br>什么意思呢？从字面上看，你可能会觉得，把现实给扭曲了对吧。说说这个词的历史，这个词最早源于《星际迷航》这部电影，指的是外星人通过精神力量创造了新世界。然而这个词最后的走红呢，跟乔布斯有关，在《苹果往事》这本书当中，作者用这个词来形容乔布斯的在沟通的时候拥有外星人一样的过人的说服力，书里面原话说——乔布斯的强大的说服力可以扭曲事实，甚至混淆视听，可以把黑的说成白的，但是最终呢，乔布斯都可以说服任何人，从那以后这个“现实扭曲力场”就被定义为为说服的最高境界。<br>给大家分享一乔布斯的故事，一方面我们来体验一下乔布斯的现实扭曲力场，另外一方面，我也会代替大家拆解他的技巧。<br>第一个故事，先说说背景，上个世纪80年代初的，苹果公司还是一家名不见经传的小科技公司，但是乔布斯看中了正在百事可乐这个大公司这个国际知名大公司任职的销售副总裁约翰·斯卡利。为了把斯卡利挖过来乔布斯可是三顾茅庐，前后试了几次都没有说服他，有一天，乔布斯约了斯卡利到公园散步，对斯卡利说了这样震撼人心的一句话：“你是想卖一辈子糖水，还是改变整个世界？”<br>这句话彻底说服了斯卡利，让他果断选择加盟苹果，后来根据斯卡利自己回忆，他说当他第一次听到乔布斯这句话的时候，就那个瞬间就什么都不想要了，就像一门心思的跟着乔布斯改变世界。我们来看看乔布斯的这句话，是不是用了对比？把可乐说成糖水，把加盟苹果公司的商业说成了改变世界，这种强烈的对比，引发了「现实扭曲力场」，把约翰斯卡利带到了一个买糖水赚钱还是改变世界的选择场景中，最终成功说服他出任苹果的CEO。<br>这，就是我们要像乔布斯学习的地方，为什么这么说呢？你可能会理解说“嗯？为了要说服别人，我们是需要适当的夸张”，这点没错！其实大部分人在说服的时候，常常是这样，就是老是说“我有什么”，而没有去说“我可以给你带来什么”只说“我有什么”，是一种“硬推”，硬推的东西就是王婆卖瓜自卖自夸，听起来是不痛不痒的，如果说乔布斯只对斯卡力说我要给你多少股份多少待遇，估计也打动不了对方。<br>而相反，你要是能多说一点“我可以给你带来什么”，把“你可以给别人带来什么”，通过一系列的修辞包装，把它包装的特别有画面感，特别有体验感，就可以让你的说服直击人心。那么就是我们今天的重点。<br>我们一步一步来学习。关于画面感和体验感，我们再来像房地产公司学习，你买房的时候，你有没有听过这种有毒的广告语？<br>房子在闹市区，他说——坐拥城市繁华<br>如果房子在郊区，他说——远离城市喧嚣<br>如果房子前面有一条臭水沟，他会说——绝版水岸花园<br>小区里面自己挖了个池子，他说——东方威尼斯<br>小区有座幼儿园，他说——书香门第，学术人文<br>房子旁边有一片荒草，他说——超大绿地一览无余<br>旁边如果什么都没有呢？他说——诗意生活，回归自然<br>一个小区啥配套都没有，就是那个小区的大门修得挺豪华的，他就说——尊荣府邸，高贵驾临。<br>你品，你细品，基本上所有的房地产公司，都有用这个套路吧？你有没有发现一个规律，这几句文案都在做一件事，把属于自己房子的特点包装成“我可以给你带来什么”，尽管包装手法有时候看起来有点夸张，但是有时候我们还是很喜欢去看这样的文字的。那么说服的呈现啊，有一个非常重要的路径，就是把“属于我要卖给你的”转换成“我可以给你带来什么”。</p>]]></content>
    
    
    <categories>
      
      <category>感悟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>九宫八卦</title>
    <link href="/2022/05/06/%E4%B9%9D%E5%AE%AB%E5%85%AB%E5%8D%A6/"/>
    <url>/2022/05/06/%E4%B9%9D%E5%AE%AB%E5%85%AB%E5%8D%A6/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>☴ 巽</th><th>☲ 离</th><th>☷ 坤</th></tr></thead><tbody><tr><td>☳ 震</td><td><a href="https://zh.m.wikipedia.org/wiki/File:Yin_yang.svg"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Yin_yang.svg/30px-Yin_yang.svg.png" alt="Yin yang.svg"></a></td><td>☱ 兑</td></tr><tr><td>☶ 艮</td><td>☵ 坎</td><td>☰ 乾</td></tr></tbody></table><img src="/2022/05/06/%E4%B9%9D%E5%AE%AB%E5%85%AB%E5%8D%A6/image-20220506155125653.png" class="" title="卦象应用">]]></content>
    
    
    <categories>
      
      <category>易经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2022/05/06/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2022/05/06/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2022/05/06/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.jpg" class="" title="图片引用方法一"><p><img src="https://cdn.jsdelivr.net/gh/3000years/picBed//img/forbidden-city-1848237.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/06/hello-world/"/>
    <url>/2022/05/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
